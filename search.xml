<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AXI4</title>
    <url>/2021/09/11/AXI4/</url>
    <content><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><ol>
<li>概念<ul>
<li>AXI(高级可扩展接口)，是ARM AMBA的一部分</li>
<li>AMBA(高级微控制器总线架构)</li>
</ul>
</li>
<li>AXI三种类型<ul>
<li>AXI4(AXI4-Full):用于高性能存储器映射需求</li>
<li>AXI4-Lite:简化版的AXI4接口，用于地吞吐率存储器映射的通信</li>
<li>AXI4-Stream:用于高速的流数据通信</li>
</ul>
</li>
<li>AXI4优点<ul>
<li>生产力:标准化的AXI接口，加快开发人员的生产力</li>
<li>灵活性：<ul>
<li>AXI4允许高吞吐率的突发，最大支持256个数据的传输</li>
<li>AXI4-Lite占用资源少，只支持单次传输一个数据</li>
<li>AXI4-Stream没有限制突发长度</li>
</ul>
</li>
<li>可获得性</li>
</ul>
</li>
<li>AXI的工作方式<ul>
<li>读地址通道</li>
<li>读数据通道</li>
<li>写地址通道</li>
<li>写响应通道</li>
</ul>
</li>
<li>AXI InterConnect和AXI SmartConnect:都用于连接单/多个存储器映射的AXI Master和单/多个存储器映射的AXI Slave</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>NLP自然语言处理</title>
    <url>/2021/07/29/NLP%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-神经网络"><a href="#1-神经网络" class="headerlink" title="1. 神经网络"></a>1. 神经网络</h2><span id="more"></span>
<h3 id="1-1-神经元"><a href="#1-1-神经元" class="headerlink" title="1.1 神经元"></a>1.1 神经元</h3><p><img src="/images/NLP%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E7%A5%9E%E7%BB%8F%E5%85%83.png"></p>
<ol>
<li>a1,a2,…,an 为各个输入的分量</li>
<li>w1,w2,…,wn 为各个输入分量对应的权重参数</li>
<li>b 为偏置</li>
<li>f为<strong>激活函数</strong>，常见的激活函数有tanh，sigmoid，relu</li>
<li>t 为神经元的输出</li>
<li>公式表示： t = f(W^TA+b)</li>
</ol>
<h3 id="1-2-单层神经网络"><a href="#1-2-单层神经网络" class="headerlink" title="1.2 单层神经网络"></a>1.2 单层神经网络</h3><p><img src="/images/NLP%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E5%8D%95%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png"></p>
<h3 id="1-3-感知机"><a href="#1-3-感知机" class="headerlink" title="1.3 感知机"></a>1.3 感知机</h3><ul>
<li>由两层神经网络组成<br><img src="/images/NLP%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%84%9F%E7%9F%A5%E6%9C%BA.png"></li>
</ul>
<h3 id="1-4-多层神经网络"><a href="#1-4-多层神经网络" class="headerlink" title="1.4 多层神经网络"></a>1.4 多层神经网络</h3><ul>
<li>输入层</li>
<li>输出层</li>
<li>隐层</li>
<li>全连接层<br><img src="/images/NLP%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E5%A4%9A%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png"></li>
</ul>
<h3 id="1-5-激活函数"><a href="#1-5-激活函数" class="headerlink" title="1.5 激活函数"></a>1.5 激活函数</h3><ul>
<li><p>作用</p>
<ol>
<li>增加模型的非线性分割能力</li>
<li>提供模型的稳健性</li>
<li>缓解梯度消失</li>
<li>加速模型的收敛</li>
</ol>
</li>
<li><p>常见的激活函数<br><img src="/images/NLP%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B05.png"></p>
</li>
<li><p>sigmoid 只会输出正数，以及靠近0的输出变化率最大</p>
</li>
<li><p>tanh和sigmoid不同的是，tanh输出可以是负数</p>
</li>
<li><p>Relu是输入只能大于0,如果你输入含有负数，Relu就不适合，如果你的输入是图片格式，Relu就挺常用的，因为图片的像素值作为输入时取值为[0,255]。</p>
<h2 id="2-pytorch"><a href="#2-pytorch" class="headerlink" title="2. pytorch"></a>2. pytorch</h2></li>
<li><p>安装:<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p>
</li>
<li><p>安装:jupyter notebook</p>
<h3 id="2-1-Tensor"><a href="#2-1-Tensor" class="headerlink" title="2.1 Tensor"></a>2.1 Tensor</h3></li>
<li><p>各种数值数据称为张量</p>
</li>
<li><p>常数：scaler：0阶张量</p>
</li>
<li><p>向量：vector：1阶张量</p>
</li>
<li><p>矩阵：matrix：2阶张量</p>
</li>
</ul>
<h3 id="2-2-创建张量"><a href="#2-2-创建张量" class="headerlink" title="2.2 创建张量"></a>2.2 创建张量</h3><ol>
<li><p>python列表或序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor([[<span class="number">1.</span>, -<span class="number">1.</span>], [<span class="number">1.</span>, -<span class="number">1.</span>]])</span><br><span class="line">tensor([[ <span class="number">1.0000</span>, -<span class="number">1.0000</span>],</span><br><span class="line">        [ <span class="number">1.0000</span>, -<span class="number">1.0000</span>]])</span><br></pre></td></tr></table></figure></li>
<li><p>numpy中的数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tensor(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]))</span><br><span class="line">tensor([[ <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>]])</span><br></pre></td></tr></table></figure></li>
<li><p>torch的api</p>
<ol>
<li><p><code>torch.empty(3,4)</code>创建3行4列的空的tensor，会用无用数据进行填充</p>
</li>
<li><p><code>torch.ones([3,4])</code> 创建3行4列的<strong>全为1</strong>的tensor</p>
</li>
<li><p><code>torch.zeros([3,4])</code>创建3行4列的<strong>全为0</strong>的tensor</p>
</li>
<li><p><code>torch.rand([3,4])</code> 创建3行4列的<strong>随机值</strong>的tensor，随机值的区间是<code>[0, 1)</code></p>
</li>
<li><p><code>torch.randint(low=0,high=10,size=[3,4])</code> 创建3行4列的<strong>随机整数</strong>的tensor，随机值的区间是<code>[low, high)</code></p>
</li>
<li><p><code>torch.randn([3,4])</code> 创建3行4列的<strong>随机数</strong>的tensor，随机值的分布式均值为0，方差为1</p>
<h3 id="2-3-Pytorch中tensor的常用方法"><a href="#2-3-Pytorch中tensor的常用方法" class="headerlink" title="2.3 Pytorch中tensor的常用方法"></a>2.3 Pytorch中tensor的常用方法</h3></li>
</ol>
</li>
<li><p>获取tensor中的数据(当tensor中只有一个元素可用)：<code>tensor对象.item()</code></p>
</li>
<li><p>转化为numpy数组:<code>tensor对象.numpy()</code></p>
</li>
<li><p>获取形状：<code>tensor.size()</code></p>
</li>
<li><p>获取阶数：<code>tensor.dim()</code></p>
</li>
<li><p>形状改变：<code>tensor.view((3,4))</code></p>
</li>
<li><p>获取最大值：<code>tensor.max()</code></p>
</li>
<li><p>转置：<code>tensor.t()</code></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>RISC-V</title>
    <url>/2021/07/20/RISC-V/</url>
    <content><![CDATA[<h2 id="1-RISC-V汇编语言"><a href="#1-RISC-V汇编语言" class="headerlink" title="1. RISC-V汇编语言"></a>1. RISC-V汇编语言</h2><span id="more"></span>
<h3 id="1-1-算数指令"><a href="#1-1-算数指令" class="headerlink" title="1.1 算数指令"></a>1.1 算数指令</h3><ul>
<li>one two ,three, four</li>
<li>one = 操作名</li>
<li>two = 操作结果</li>
<li>three = 操作数1</li>
<li>four = 操作数2</li>
<li>操作<ul>
<li>add</li>
<li>sub</li>
<li>addi </li>
<li>mv</li>
<li>li</li>
</ul>
</li>
</ul>
<h3 id="1-2-访存指令"><a href="#1-2-访存指令" class="headerlink" title="1.2 访存指令"></a>1.2 访存指令</h3><ul>
<li>读字：lw x10 , 偏移量(x15)<ul>
<li>x15的值加上偏移量所得的地址的值放到x10中</li>
</ul>
</li>
<li>写字：sw x10 , 40(x15)<ul>
<li>x15加上40的地址中的值放到x10中</li>
</ul>
</li>
<li>读字节：lb/lbu<ul>
<li>经过符号扩展</li>
</ul>
</li>
<li>写字节：sb<ul>
<li>不经过符号扩展</li>
</ul>
</li>
</ul>
<h3 id="1-3-条件判断分支转移"><a href="#1-3-条件判断分支转移" class="headerlink" title="1.3 条件判断分支转移"></a>1.3 条件判断分支转移</h3><ul>
<li>条件分支转移：beq register1 , register2, 跳转地址   <ul>
<li>bne为不相等跳转、blt小于则跳转、bltu当作无符号比较、bge大于等于跳转</li>
</ul>
</li>
<li>无条件转移：j Loop</li>
</ul>
<h3 id="1-4-逻辑运算指令"><a href="#1-4-逻辑运算指令" class="headerlink" title="1.4 逻辑运算指令"></a>1.4 逻辑运算指令</h3><ul>
<li><img src="/images/RISCV/%E9%80%BB%E8%BE%91.png" title="图片"></li>
<li>andi(与立即数做与运算)、xori、ori</li>
<li>slli、srli</li>
<li>算数右移（有符号扩展）sra和srai</li>
<li>mv rd , rs = addi rd , rs 0</li>
<li>li rd , 13 = addi rd , x0 13<h3 id="1-5-函数调用"><a href="#1-5-函数调用" class="headerlink" title="1.5 函数调用"></a>1.5 函数调用</h3></li>
<li>调用过程<ol>
<li>先将需要用到的参数保存</li>
<li>将控制权移交给这次调用的功能函数</li>
<li>根据功能函数申请一定的存储空间</li>
<li>执行函数的功能操作</li>
<li>将结果数据保存好，同时还原寄存器的值，释放申请的空间</li>
<li>控制器返还给原进程</li>
</ol>
</li>
<li>jr</li>
<li>jal</li>
<li>其他<ul>
<li>a0-a7：编号x10-x17的寄存器，用来向调用的函数传参，a0和a1寄存器常用于传递返回值</li>
<li>ra：x1寄存器，用来保存返回时的返回地址值</li>
<li>s0-s11:对应x8-x9和x18-x27的寄存器，保存原进程中的关键数据避免在函数调用中被破坏</li>
</ul>
</li>
</ul>
<h3 id="1-6-栈的使用"><a href="#1-6-栈的使用" class="headerlink" title="1.6 栈的使用"></a>1.6 栈的使用</h3><ul>
<li>sp为栈针</li>
<li><img src="/images/RISCV/RegisterNames.png" title="图片"></li>
<li><img src="/images/RISCV/stackInMemory.png" title="图片"></li>
</ul>
<h2 id="2-RISC-V指令表示"><a href="#2-RISC-V指令表示" class="headerlink" title="2. RISC-V指令表示"></a>2. RISC-V指令表示</h2><ul>
<li>指令格式<ul>
<li>R -寄存器于寄存器之间算数运算</li>
<li>i -寄存器与立即数之间算数运算</li>
<li>S -写存储器</li>
<li>B -分支转移</li>
<li>U -高20bit位的立即数操作</li>
<li>J -用于跳转</li>
</ul>
</li>
</ul>
<h3 id="2-1-R型指令"><a href="#2-1-R型指令" class="headerlink" title="2.1 R型指令"></a>2.1 R型指令</h3><ul>
<li><img src="/images/RISCV/R%E5%9E%8B%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png" title="图片"></li>
<li>操作码二进制表示为：0110011</li>
<li>funct7+funct7：与操作码相组合使用，进一步描述指令</li>
<li>rs2：原寄存器，第一个操作数寄存器编号</li>
<li>rs1：原寄存器，第二个操作数寄存器编号</li>
<li>rd：目的寄存器，接收结果的目的寄存器编号</li>
<li>例：<ul>
<li><img src="/images/RISCV/R%E4%BE%8B%E5%AD%90.png" title="图片"></li>
<li><img src="/images/RISCV/R%E4%BE%8B%E5%AD%90%E7%BC%96%E7%A0%81.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="2-2-I型指令"><a href="#2-2-I型指令" class="headerlink" title="2.2 I型指令"></a>2.2 I型指令</h3><ul>
<li><img src="/images/RISCV/I%E5%9E%8B%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png" title="图片"></li>
<li>例：<ul>
<li><img src="/images/RISCV/I%E4%BE%8B%E5%AD%90.png" title="图片"></li>
<li><img src="/images/RISCV/I%E4%BE%8B%E5%AD%90%E7%BC%96%E7%A0%81.png" title="图片"></li>
</ul>
</li>
<li>访存装载<ul>
<li><img src="/images/RISCV/I%E5%9E%8B%E6%8C%87%E4%BB%A4Load%E6%A0%BC%E5%BC%8F.png" title="图片"></li>
<li><img src="/images/RISCV/I%E8%AE%BF%E5%AD%98%E8%A3%85%E8%BD%BD%E7%BC%96%E7%A0%81.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="2-3-S型指令"><a href="#2-3-S型指令" class="headerlink" title="2.3 S型指令"></a>2.3 S型指令</h3><ul>
<li><img src="/images/RISCV/S%E5%9E%8B%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png" title="图片"></li>
<li>例子<ul>
<li><img src="/images/RISCV/S%E5%9E%8B%E6%8C%87%E4%BB%A4%E4%BE%8B%E5%AD%90.png" title="图片"></li>
<li><img src="/images/RISCV/S%E5%9E%8B%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="2-4-B型指令"><a href="#2-4-B型指令" class="headerlink" title="2.4 B型指令"></a>2.4 B型指令</h3><ul>
<li><img src="/images/RISCV/B%E5%9E%8B%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F.png" title="图片"></li>
<li>例子<ul>
<li><img src="/images/RISCV/B%E5%9E%8B%E6%8C%87%E4%BB%A4%E4%BE%8B%E5%AD%901.png" title="图片"></li>
<li><img src="/images/RISCV/B%E5%9E%8B%E6%8C%87%E4%BB%A4%E4%BE%8B%E5%AD%902.png" title="图片"></li>
<li><img src="/images/RISCV/B%E5%9E%8B%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A0%81.png" title="图片"></li>
</ul>
</li>
<li>立即数扩展<ul>
<li><img src="/images/RISCV/%E7%AB%8B%E5%8D%B3%E6%95%B0%E6%89%A9%E5%B1%95.png" title="图片"><h3 id="2-5-U型指令"><a href="#2-5-U型指令" class="headerlink" title="2.5 U型指令"></a>2.5 U型指令</h3></li>
</ul>
</li>
<li>x10中写入0xDEADBEEF<ul>
<li>LUI x10 , 0xDEADC</li>
<li>ADDI x10 , x10 , 0xEEF</li>
<li>等效于 li x10 , 0xDEADBEEF</li>
</ul>
</li>
<li>Lable:AUIPC x10,0<ul>
<li>将Lable地址值保存到x10中</li>
</ul>
</li>
</ul>
<h3 id="2-6-J型指令"><a href="#2-6-J型指令" class="headerlink" title="2.6 J型指令"></a>2.6 J型指令</h3><ul>
<li><img src="/images/RISCV/J%E5%9E%8B%E6%8C%87%E4%BB%A4.png" title="图片"></li>
<li><img src="/images/RISCV/jalr.png" title="图片"><h2 id="3-数据通路"><a href="#3-数据通路" class="headerlink" title="3. 数据通路"></a>3. 数据通路</h2><h3 id="3-1-基本单元模块"><a href="#3-1-基本单元模块" class="headerlink" title="3.1 基本单元模块"></a>3.1 基本单元模块</h3></li>
</ul>
<ol>
<li>取指</li>
<li>译码</li>
<li>算术运算</li>
<li>访存</li>
<li>写回寄存器</li>
</ol>
<h3 id="3-2-R型指令"><a href="#3-2-R型指令" class="headerlink" title="3.2 R型指令"></a>3.2 R型指令</h3><ul>
<li><img src="/images/RISCV/R%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png" title="图片"></li>
</ul>
<h3 id="3-3-加入I型指令"><a href="#3-3-加入I型指令" class="headerlink" title="3.3 加入I型指令"></a>3.3 加入I型指令</h3><ul>
<li><img src="/images/RISCV/I%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png" title="图片"></li>
<li><img src="/images/RISCV/I%E5%9E%8B%E7%AB%8B%E5%8D%B3%E6%95%B0%E7%94%9F%E6%88%90%E5%8D%95%E5%85%83.png" title="图片"></li>
<li>添加访存装载<ul>
<li><img src="/images/RISCV/I%E5%9E%8B%E8%AE%BF%E5%AD%98%E8%A3%85%E8%BD%BD%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="3-4-加入S型指令"><a href="#3-4-加入S型指令" class="headerlink" title="3.4 加入S型指令"></a>3.4 加入S型指令</h3><ul>
<li><img src="/images/RISCV/S%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png" title="图片"></li>
<li><img src="/images/RISCV/S%E5%9E%8B%E7%AB%8B%E5%8D%B3%E6%95%B0%E7%94%9F%E6%88%90%E5%8D%95%E5%85%83.png" title="图片"></li>
</ul>
<h3 id="3-5-加入B型指令"><a href="#3-5-加入B型指令" class="headerlink" title="3.5 加入B型指令"></a>3.5 加入B型指令</h3><ul>
<li><img src="/images/RISCV/B%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png" title="图片"></li>
<li><img src="/images/RISCV/B%E5%9E%8B%E5%88%86%E6%94%AF%E6%AF%94%E8%BE%83.png" title="图片"></li>
<li><img src="/images/RISCV/B%E5%9E%8B%E7%AB%8B%E5%8D%B3%E6%95%B0.png" title="图片"></li>
<li>添加jalr指令<ul>
<li><img src="/images/RISCV/B%E5%9E%8Bjalr.png" title="图片"></li>
</ul>
</li>
<li>添加jal指令</li>
</ul>
<h3 id="3-6-加入U型指令"><a href="#3-6-加入U型指令" class="headerlink" title="3.6 加入U型指令"></a>3.6 加入U型指令</h3><ul>
<li><img src="/images/RISCV/U%E5%9E%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png" title="图片"></li>
</ul>
<h2 id="4-控制器"><a href="#4-控制器" class="headerlink" title="4. 控制器"></a>4. 控制器</h2><h3 id="4-1-控制信号"><a href="#4-1-控制信号" class="headerlink" title="4.1 控制信号"></a>4.1 控制信号</h3><ul>
<li>add<br><img src="/images/RISCV/add%E6%8C%87%E4%BB%A4%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84.png" title="图片"></li>
<li>sw<br><img src="/images/RISCV/sw%E6%8C%87%E4%BB%A4%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84.png" title="图片"></li>
<li>beq<br><img src="/images/RISCV/beq%E6%8C%87%E4%BB%A4%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84.png" title="图片"></li>
</ul>
<h3 id="4-2-实现"><a href="#4-2-实现" class="headerlink" title="4.2 实现"></a>4.2 实现</h3><ul>
<li>真值表<ul>
<li><img src="/images/RISCV/%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9C%9F%E5%80%BC%E8%A1%A8.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="5-流水线"><a href="#5-流水线" class="headerlink" title="5. 流水线"></a>5. 流水线</h2><h3 id="5-1-设计"><a href="#5-1-设计" class="headerlink" title="5.1 设计"></a>5.1 设计</h3><h3 id="5-2-结构冒险"><a href="#5-2-结构冒险" class="headerlink" title="5.2 结构冒险"></a>5.2 结构冒险</h3>]]></content>
  </entry>
  <entry>
    <title>SpinalHDL</title>
    <url>/2021/07/22/SpinalHDL/</url>
    <content><![CDATA[<h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><ul>
<li>基本类型<span id="more"></span>
<ol>
<li>Bool <!-- - 声明:val myB = Bool()
 - 操作
     - 逻辑
         - 与、或、非、异或
         - .set()、.clear()
         - .setWhen()、.clearWhen()
         - .riseWhen、.fallWhen()
     - 边缘:edge()、rise()、fall()、edges()
     - 比较
     - 类型转换
     - 拼接 --></li>
<li>Bits</li>
<li>UInt</li>
<li>SInt</li>
<li>Enum</li>
</ol>
</li>
<li>复合类型  <ol>
<li>Bundle</li>
<li>Vec</li>
</ol>
</li>
</ul>
<h2 id="2-构建"><a href="#2-构建" class="headerlink" title="2. 构建"></a>2. 构建</h2><h3 id="2-1-组件和层次结构"><a href="#2-1-组件和层次结构" class="headerlink" title="2.1 组件和层次结构"></a>2.1 组件和层次结构</h3><ul>
<li><p>输入输出定义</p>
<ul>
<li>in Bool() / out Bool()</li>
<li>in/out Bits/UInt/SInt[(x bit)]</li>
<li>in/out(T)</li>
<li>master/slave(T)</li>
</ul>
</li>
<li><p>修剪信号</p>
<ul>
<li>显示无用信号：SpinalVerilog(*).printPruned()</li>
<li>RTL中保留修剪信号：信号.keep()</li>
</ul>
</li>
<li><p>参数化组件</p>
<ul>
<li>通过类传递位宽或配置类</li>
</ul>
</li>
<li><p>综合后组件名称</p>
<ul>
<li>setName</li>
<li>getName</li>
<li>setPartialName</li>
<li>getPartialName</li>
<li>setDefinitionName</li>
</ul>
</li>
</ul>
<h3 id="2-3-Area"><a href="#2-3-Area" class="headerlink" title="2.3 Area"></a>2.3 Area</h3><ul>
<li><p>格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 定义一些逻辑</span><br><span class="line">val timer = new Area &#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-函数"><a href="#2-4-函数" class="headerlink" title="2.4 函数"></a>2.4 函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Input RGB color</span><br><span class="line">val r, g, b = UInt(8 bits)</span><br><span class="line"></span><br><span class="line">// Define a function to multiply a UInt by a Scala Float value.</span><br><span class="line">def coef(value: UInt, by: Float): UInt = (value * U((255 * by).toInt, 8 bits) &gt;&gt; 8)</span><br><span class="line"></span><br><span class="line">// Calculate the gray level</span><br><span class="line">val gray = coef(r, 0.3f) + coef(g, 0.4f) + coef(b, 0.3f)</span><br></pre></td></tr></table></figure>
<h3 id="2-5-时钟域"><a href="#2-5-时钟域" class="headerlink" title="2.5 时钟域"></a>2.5 时钟域</h3><h4 id="①-实例"><a href="#①-实例" class="headerlink" title="① 实例"></a>① 实例</h4></li>
<li><p>时钟域语法</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">ClockDomain</span>(</span><br><span class="line">  clock: <span class="type">Bool</span></span><br><span class="line">  [,reset: <span class="type">Bool</span>]</span><br><span class="line">  [,softReset: <span class="type">Bool</span>]</span><br><span class="line">  [,clockEnable: <span class="type">Bool</span>]</span><br><span class="line">  [,frequency: <span class="type">IClockDomainFrequency</span>]</span><br><span class="line">  [,config: <span class="type">ClockDomainConfig</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
<th align="center">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clock</td>
<td align="center">是否定义时钟信号</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">reset</td>
<td align="center">复位信号，若存在需要复位的寄存器而时钟域未提供则会报错</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">softReset</td>
<td align="center">同步复位</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">clockEnable</td>
<td align="center">禁用整个时钟域上的时钟</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">frequency</td>
<td align="center">指定时钟频率</td>
<td align="center">UnknownFrequency</td>
</tr>
<tr>
<td align="center">config</td>
<td align="center">指定信号的极性和复位性质</td>
<td align="center">当前的配置</td>
</tr>
</tbody></table>
</li>
<li><p>通过ClockDomainConfig配置ClockDomain</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 以下也为时钟域的默认设置</span><br><span class="line">val defaultCC = ClockDomainConfig(</span><br><span class="line">  clockEdge        = RISING,</span><br><span class="line">  resetKind        = ASYNC,</span><br><span class="line">  resetActiveLevel = HIGH</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">有效值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clockEdge</td>
<td align="center">RISING, FALLING</td>
</tr>
<tr>
<td align="center">resetKind</td>
<td align="center">ASYNC,SYNC,BOOT</td>
</tr>
<tr>
<td align="center">resetActiveLevel</td>
<td align="center">HIGH, LOW</td>
</tr>
<tr>
<td align="center">softResetActiveLevel</td>
<td align="center">HIGH, LOW</td>
</tr>
<tr>
<td align="center">clockEnableActiveLevel</td>
<td align="center">HIGH, LOW</td>
</tr>
</tbody></table>
</li>
<li><p>内部时钟</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">ClockDomain</span>.internal(</span><br><span class="line">  name: <span class="type">String</span>,</span><br><span class="line">  [config: <span class="type">ClockDomainConfig</span>,]</span><br><span class="line">  [withReset: <span class="type">Boolean</span>,]</span><br><span class="line">  [withSoftReset: <span class="type">Boolean</span>,]</span><br><span class="line">  [withClockEnable: <span class="type">Boolean</span>,]</span><br><span class="line">  [frequency: <span class="type">IClockDomainFrequency</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
<th align="center">默认</th>
</tr>
</thead>
<tbody><tr>
<td align="center">name</td>
<td align="center">时钟和复位信号的名称</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">config</td>
<td align="center">指定信号的极性和复位的性质</td>
<td align="center">当前配置</td>
</tr>
<tr>
<td align="center">withReset</td>
<td align="center">复位信号</td>
<td align="center">true</td>
</tr>
<tr>
<td align="center">withSoftReset</td>
<td align="center">软复位信号</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">withClockEnable</td>
<td align="center">添加时钟使能</td>
<td align="center">false</td>
</tr>
<tr>
<td align="center">frequency</td>
<td align="center">时钟频率</td>
<td align="center">未知频率</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li><p>外部时钟</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">ClockDomain</span>.external(</span><br><span class="line">  name: <span class="type">String</span>,</span><br><span class="line">  [config: <span class="type">ClockDomainConfig</span>,]</span><br><span class="line">  [withReset: <span class="type">Boolean</span>,]</span><br><span class="line">  [withSoftReset: <span class="type">Boolean</span>,]</span><br><span class="line">  [withClockEnable: <span class="type">Boolean</span>,]</span><br><span class="line">  [frequency: <span class="type">IClockDomainFrequency</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前时钟信息ClockDomain.current</p>
</li>
</ul>
<h4 id="②跨时钟域"><a href="#②跨时钟域" class="headerlink" title="②跨时钟域"></a>②跨时钟域</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val area_clkA = new ClockingArea(ClockDomain(io.clkA,io.rstA)) &#123;</span><br><span class="line">  val reg = RegNext(io.dataIn) init(False)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2 register stages to avoid metastability issues</span><br><span class="line">val area_clkB = new ClockingArea(ClockDomain(io.clkB,io.rstB)) &#123;</span><br><span class="line">  val buf0   = RegNext(area_clkA.reg) init(False) addTag(crossClockDomain)//获取了area_clkA时钟域中的信号</span><br><span class="line">  val buf1   = RegNext(buf0)          init(False)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="③-特殊的时钟区域"><a href="#③-特殊的时钟区域" class="headerlink" title="③ 特殊的时钟区域"></a>③ 特殊的时钟区域</h3><ul>
<li>slow area<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Slow the current clockDomain by 4 : 25 MHz</span></span><br><span class="line">  <span class="keyword">val</span> areaDiv4 = <span class="keyword">new</span> <span class="type">SlowArea</span>(<span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> counter = out(<span class="type">CounterFreeRun</span>(<span class="number">16</span>).value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Slow the current clockDomain to 50MHz</span></span><br><span class="line">  <span class="keyword">val</span> area50Mhz = <span class="keyword">new</span> <span class="type">SlowArea</span>(<span class="number">50</span> <span class="type">MHz</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> counter = out(<span class="type">CounterFreeRun</span>(<span class="number">16</span>).value)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>ResetArea<ul>
<li>ResetArea 用于创建一个新的时钟域区域，其中一个特殊的复位信号与当前时钟域复位相结合<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopLevel</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> specialReset = <span class="type">Bool</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The reset of this area is done with the specialReset signal</span></span><br><span class="line">  <span class="keyword">val</span> areaRst_1 = <span class="keyword">new</span> <span class="type">ResetArea</span>(specialReset, <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> counter = out(<span class="type">CounterFreeRun</span>(<span class="number">16</span>).value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The reset of this area is a combination between the current reset and the specialReset</span></span><br><span class="line">  <span class="keyword">val</span> areaRst_2 = <span class="keyword">new</span> <span class="type">ResetArea</span>(specialReset, <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> counter = out(<span class="type">CounterFreeRun</span>(<span class="number">16</span>).value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>ClockEnableArea<ul>
<li>ClockEnableArea 用于在当前时钟域中添加额外的时钟使能：<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TopLevel</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> clockEnable = <span class="type">Bool</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add a clock enable for this area</span></span><br><span class="line">  <span class="keyword">val</span> area_1 = <span class="keyword">new</span> <span class="type">ClockEnableArea</span>(clockEnable) &#123;</span><br><span class="line">    <span class="keyword">val</span> counter = out(<span class="type">CounterFreeRun</span>(<span class="number">16</span>).value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="2-6-verilog-实例化"><a href="#2-6-verilog-实例化" class="headerlink" title="2.6 verilog 实例化"></a>2.6 verilog 实例化</h3><ul>
<li>黑盒<ul>
<li>黑盒允许用户通过指定其接口将现有的 VHDL/Verilog 组件集成到设计中。 由模拟器或合成器来正确地进行细化。</li>
<li>定义：class 名字 extend BlackBox</li>
</ul>
</li>
<li>泛型<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ram</span>(<span class="params">wordWidth: <span class="type">Int</span>, wordCount: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">BlackBox</span> </span>&#123;</span><br><span class="line">    addGeneric(<span class="string">&quot;wordCount&quot;</span>, wordCount)</span><br><span class="line">    addGeneric(<span class="string">&quot;wordWidth&quot;</span>, wordWidth)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> generic = <span class="keyword">new</span> <span class="type">Generic</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> wordCount = <span class="type">Ram</span>.<span class="keyword">this</span>.wordCount</span><br><span class="line">      <span class="keyword">val</span> wordWidth = <span class="type">Ram</span>.<span class="keyword">this</span>.wordWidth</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>实例化黑盒<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化黑盒</span></span><br><span class="line"> <span class="keyword">val</span> ram = <span class="keyword">new</span> <span class="type">Ram_1w_1r</span>(<span class="number">8</span>,<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 连接所有的信号</span></span><br><span class="line"> io.wr.en   &lt;&gt; ram.io.wr.en</span><br><span class="line"> io.wr.addr &lt;&gt; ram.io.wr.addr</span><br><span class="line"> io.wr.data &lt;&gt; ram.io.wr.data</span><br><span class="line"> io.rd.en   &lt;&gt; ram.io.rd.en</span><br><span class="line"> io.rd.addr &lt;&gt; ram.io.rd.addr</span><br><span class="line"> io.rd.data &lt;&gt; ram.io.rd.data</span><br></pre></td></tr></table></figure></li>
<li>时钟和重置映射<ul>
<li>使用mapCurrentClockDomain和mapClockDomain函数</li>
<li>mapClockDomain参数列表<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">类型</th>
<th align="center">默认</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clockDomain</td>
<td align="center">ClockDomain</td>
<td align="center">ClockDomain.current</td>
<td align="center">指定提供信号的时钟</td>
</tr>
<tr>
<td align="center">clock</td>
<td align="center">Bool</td>
<td align="center">无</td>
<td align="center">连接到时钟clock</td>
</tr>
<tr>
<td align="center">reset</td>
<td align="center">Bool</td>
<td align="center">无</td>
<td align="center">连接到时钟reset</td>
</tr>
<tr>
<td align="center">enable</td>
<td align="center">Bool</td>
<td align="center">无</td>
<td align="center">连接到时钟enable</td>
</tr>
</tbody></table>
</li>
<li>例子<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRam</span>(<span class="params">clkDomain: <span class="type">ClockDomain</span></span>) <span class="keyword">extends</span> <span class="title">BlackBox</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> io = <span class="keyword">new</span> <span class="type">Bundle</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> clkA = in <span class="type">Bool</span>()</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">val</span> clkB = in <span class="type">Bool</span>()</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Clock A is map on a specific clock Domain</span></span><br><span class="line">  mapClockDomain(clkDomain, io.clkA)</span><br><span class="line">  <span class="comment">// Clock B is map on the current clock domain</span></span><br><span class="line">  mapCurrentClockDomain(io.clkB)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>io 前缀<ul>
<li>noIoPrefix()函数可以消除io前缀</li>
</ul>
</li>
<li>重命名黑盒所有io<ul>
<li>addPrePopTask(() =&gt; renameIO())当黑盒被创建后执行renameIo方法</li>
</ul>
</li>
<li>添加rtl资源<ul>
<li>addRTLPath(“./rtl/RegisterBank.v”)   - 在组件内部 </li>
<li>report.mergeRTLSource(“mergeRTL”) -report为SpinalVerilog对象</li>
</ul>
</li>
<li>VHDL-无数字类型</li>
</ul>
<h3 id="2-7-保留名"><a href="#2-7-保留名" class="headerlink" title="2.7 保留名"></a>2.7 保留名</h3><ul>
<li>可命名的基础类<ul>
<li>Component</li>
<li>Area</li>
<li>Data</li>
<li>例子<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> a, b, c, d = <span class="type">Bool</span>()</span><br><span class="line">  b.setName(<span class="string">&quot;rawrr&quot;</span>) <span class="comment">// 强制命名</span></span><br><span class="line">  c.setName(<span class="string">&quot;rawrr&quot;</span>, weak = <span class="literal">true</span>) <span class="comment">// 提出命名，若这个强制命名的名称已被使用则此命名不会生效</span></span><br><span class="line">  d.setCompositeName(b, postfix = <span class="string">&quot;wuff&quot;</span>) <span class="comment">// 等效于 b.getName() + _wuff&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>从scala中提取名称<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//spinal.idslplugin.ValCallback is the Scala compiler plugin feature which will provide the callbacks</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">spinal</span>.<span class="title">idslplugin</span>.<span class="title">ValCallback</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">valCallback</span></span>[<span class="type">T</span>](ref: <span class="type">T</span>, name: <span class="type">String</span>) : <span class="type">T</span> = &#123;</span><br><span class="line">    println(<span class="string">s&quot;Got <span class="subst">$ref</span> named <span class="subst">$name</span>&quot;</span>) <span class="comment">// Here we just print what we got as a demo.</span></span><br><span class="line">    ref</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UInt</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bits</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">val</span> two = <span class="number">2</span></span><br><span class="line">  <span class="keyword">val</span> wuff = <span class="string">&quot;miaou&quot;</span></span><br><span class="line">  <span class="keyword">val</span> toto = <span class="keyword">new</span> <span class="type">UInt</span></span><br><span class="line">  <span class="keyword">val</span> rawrr = <span class="keyword">new</span> <span class="type">Bits</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Debug3</span> <span class="keyword">extends</span> <span class="title">App</span></span>&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">MyComponent</span>()</span><br><span class="line">  <span class="comment">// ^ This will print :</span></span><br><span class="line">  <span class="comment">// Got 2 named two</span></span><br><span class="line">  <span class="comment">// Got miaou named wuff</span></span><br><span class="line">  <span class="comment">// Got spinal.tester.code.sandbox.UInt@691a7f8f named toto</span></span><br><span class="line">  <span class="comment">// Got spinal.tester.code.sandbox.Bits@161b062a named rawrr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>组件中的Area<ul>
<li>val logic = new Area{} 内部的变量都是logic_前缀</li>
</ul>
</li>
<li>函数中的Area<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>(value: <span class="type">UInt</span>) = <span class="keyword">new</span> <span class="type">Area</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> comparator = value === <span class="number">0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>函数中的Composite<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>(value: <span class="type">UInt</span>) = <span class="keyword">new</span> <span class="type">Composite</span>(value) &#123;</span><br><span class="line">  <span class="keyword">val</span> comparator = value === <span class="number">0</span></span><br><span class="line">&#125;.comparator </span><br></pre></td></tr></table></figure></li>
<li>Composite chains 将Composite函数嵌套使用</li>
<li>Composite in a Bundle’s function 不会</li>
<li>未命名信号处理<ul>
<li><em>zz</em> + drivenSignal.getName()</li>
</ul>
</li>
</ul>
<h2 id="3-语义"><a href="#3-语义" class="headerlink" title="3. 语义"></a>3. 语义</h2><h3 id="3-1-赋值"><a href="#3-1-赋值" class="headerlink" title="3.1 赋值"></a>3.1 赋值</h3><ul>
<li>符号<ul>
<li>:= 等价于 &lt;=</li>
<li>= 等价于 =</li>
<li> &lt;&gt; 信号连接</li>
</ul>
</li>
<li>宽度检测<ul>
<li>x := y.resized</li>
<li>x := y.resize(newWidth)</li>
</ul>
</li>
</ul>
<h3 id="3-2-When-Switch-Mux"><a href="#3-2-When-Switch-Mux" class="headerlink" title="3.2 When/Switch/Mux"></a>3.2 When/Switch/Mux</h3><ul>
<li><p>when</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">when(cond1) &#123;</span><br><span class="line">  <span class="comment">// Execute when cond1 is true</span></span><br><span class="line">&#125;.elsewhen(cond2) &#123;</span><br><span class="line">  <span class="comment">// Execute when (not cond1) and cond2</span></span><br><span class="line">&#125;.otherwise &#123;</span><br><span class="line">  <span class="comment">// Execute when (not cond1) and (not cond2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>switch</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">switch(x) &#123;</span><br><span class="line">  is(value1) &#123;</span><br><span class="line">    <span class="comment">// Execute when x === value1</span></span><br><span class="line">  &#125;</span><br><span class="line">  is(value2) &#123;</span><br><span class="line">    <span class="comment">// Execute when x === value2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// Execute if none of precedent conditions met</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Mux</p>
<ul>
<li>Mux(cond,whenTrue,whenFalse)</li>
<li>cond ? whenTrue|whenFalse</li>
</ul>
</li>
<li><p>bitwise(选择器)</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> bitwiseSelect = <span class="type">UInt</span>(<span class="number">2</span> bits)</span><br><span class="line"><span class="keyword">val</span> bitwiseResult = bitwiseSelect.mux(</span><br><span class="line">  <span class="comment">// 两位有三种情况</span></span><br><span class="line">  <span class="number">0</span> -&gt; (io.src0 &amp; io.src1),</span><br><span class="line">  <span class="number">1</span> -&gt; (io.src0 | io.src1),</span><br><span class="line">  <span class="number">2</span> -&gt; (io.src0 ^ io.src1),</span><br><span class="line">  <span class="keyword">default</span> -&gt; (io.src0)</span><br><span class="line">)</span><br><span class="line">===================</span><br><span class="line">muxLists(...)不会</span><br><span class="line"><span class="keyword">val</span> sel  = <span class="type">UInt</span>(<span class="number">2</span> bits)</span><br><span class="line"><span class="keyword">val</span> data = <span class="type">Bits</span>(<span class="number">128</span> bits)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dividing a wide Bits type into smaller chunks, using a mux:</span></span><br><span class="line"><span class="keyword">val</span> dataWord = sel.muxList(<span class="keyword">for</span> (index &lt;- <span class="number">0</span> until <span class="number">4</span>) <span class="keyword">yield</span> (index, data(index*<span class="number">32</span>+<span class="number">32</span><span class="number">-1</span> downto index*<span class="number">32</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// A shorter way to do the same thing:</span></span><br><span class="line"><span class="keyword">val</span> dataWord = data.subdivideIn(<span class="number">32</span> bits)(sel)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-3-规则"><a href="#3-3-规则" class="headerlink" title="3.3 规则"></a>3.3 规则</h3><ul>
<li>并发<ul>
<li>分配信号的顺序对行为没有影响</li>
</ul>
</li>
</ul>
<h2 id="4-时序逻辑"><a href="#4-时序逻辑" class="headerlink" title="4. 时序逻辑"></a>4. 时序逻辑</h2><h3 id="4-1-寄存器"><a href="#4-1-寄存器" class="headerlink" title="4.1 寄存器"></a>4.1 寄存器</h3><ul>
<li><p>定义寄存器</p>
<ul>
<li>Reg(type:Data)</li>
<li>RegInit(ResetValue:Data)</li>
<li>RegNext(nextValue:Data)</li>
<li>RegNextWhen(nextValue:data,cond:Bool)</li>
<li><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无符号4比特寄存器</span></span><br><span class="line"><span class="keyword">val</span> reg1 = <span class="type">Reg</span>(<span class="type">UInt</span>(<span class="number">4</span> bit))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个周期获取reg1+1的值</span></span><br><span class="line"><span class="keyword">val</span> reg2 = <span class="type">RegNext</span>(reg1 + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4比特无符号寄存器，重置信号产生则重置为0</span></span><br><span class="line"><span class="keyword">val</span> reg3 = <span class="type">RegInit</span>(<span class="type">U</span><span class="string">&quot;0000&quot;</span>)</span><br><span class="line">reg3 := reg2</span><br><span class="line">when(reg2 === <span class="number">5</span>) &#123;</span><br><span class="line">  reg3 := <span class="number">0xF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当cond为真时获取reg3的值</span></span><br><span class="line"><span class="keyword">val</span> reg4 = <span class="type">RegNextWhen</span>(reg3, cond)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>重置</p>
<ul>
<li>调用init方法 val reg1 = Reg(UInt(4 bit)) init(0)</li>
<li>randBoot初始化随机数</li>
</ul>
</li>
</ul>
<h3 id="4-2-RAM-ROM"><a href="#4-2-RAM-ROM" class="headerlink" title="4.2 RAM/ROM"></a>4.2 RAM/ROM</h3><ul>
<li>实例化<ul>
<li>创建RAM：Mem(type:Data,size:Int) </li>
<li>创建ROM：Mem(type:Data,initialContent : Array[Data])</li>
</ul>
</li>
<li><h2 id="读写冲突策略"><a href="#读写冲突策略" class="headerlink" title="读写冲突策略"></a>读写冲突策略</h2><table>
<thead>
<tr>
<th align="center">种类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dontCare</td>
<td align="center">不关心读出的值</td>
</tr>
<tr>
<td align="center">readFirst</td>
<td align="center">读旧的数据</td>
</tr>
<tr>
<td align="center">writeFirst</td>
<td align="center">读新的数据</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="5-设计报错"><a href="#5-设计报错" class="headerlink" title="5.设计报错"></a>5.设计报错</h2>]]></content>
  </entry>
  <entry>
    <title>dsp</title>
    <url>/2021/09/30/dsp/</url>
    <content><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><ul>
<li><a href="https://software-dl.ti.com/ccs/esd/documents/ccs_downloads.html">https://software-dl.ti.com/ccs/esd/documents/ccs_downloads.html</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ip核</title>
    <url>/2021/09/11/ip%E6%A0%B8/</url>
    <content><![CDATA[<h1 id="1-RAM"><a href="#1-RAM" class="headerlink" title="1. RAM"></a>1. RAM</h1><ul>
<li>RAM（Random Access Memory）随机访问存储器<ul>
<li>SRAM</li>
<li>DRAM</li>
</ul>
</li>
<li>单端口ram </li>
<li>伪双端口</li>
<li>真双端口</li>
</ul>
<h1 id="2-FIFO"><a href="#2-FIFO" class="headerlink" title="2. FIFO"></a>2. FIFO</h1>]]></content>
  </entry>
  <entry>
    <title>ppt</title>
    <url>/2021/08/04/ppt/</url>
    <content><![CDATA[<h1 id="1-字体"><a href="#1-字体" class="headerlink" title="1. 字体"></a>1. 字体</h1><span id="more"></span>
<ul>
<li><p>分类</p>
<ul>
<li>宋体</li>
<li>黑体</li>
<li>楷体</li>
<li>其他</li>
</ul>
</li>
<li><p>气质</p>
<ul>
<li>粗狂 <ul>
<li>标题封面 </li>
<li>微软雅黑加粗</li>
<li>造字工房力黑</li>
<li>汉仪综艺体简</li>
<li>叶根友刀锋黑草</li>
<li>方正超粗黑</li>
</ul>
</li>
<li>优雅<ul>
<li>微软雅黑light</li>
<li>方正兰亭超细黑简体</li>
<li>思源黑体CN Light</li>
<li>方正幼线简体</li>
<li>造字工房悦黑体验版纤细体</li>
</ul>
</li>
<li>古风<ul>
<li>楷体</li>
<li>宋体</li>
<li>中山行书百年纪念版</li>
<li>方正小标宋——GBK</li>
</ul>
</li>
<li>可爱<ul>
<li>方正少儿简体</li>
<li>华康少女文字</li>
<li>华康娃娃体</li>
<li>造字工房情书</li>
</ul>
</li>
</ul>
</li>
<li><p>安装</p>
<ul>
<li><a href="https://font.chinaz.com/">https://font.chinaz.com/</a></li>
<li><a href="http://fonts.mobanwang.com/">http://fonts.mobanwang.com/</a></li>
<li><a href="http://www.qiuziti.com/">www.qiuziti.com</a></li>
</ul>
</li>
<li><p>修饰</p>
<ol>
<li>外边框修饰</li>
<li>图文结合</li>
<li>文字镂空<ul>
<li>插入图片，插入文字，文字居中</li>
<li>用矩形铺满画布并用黑色填充</li>
<li>右键设置形状格式，填充设置透明度</li>
<li>选住矩形框和文字</li>
<li>点击格式中的剪除</li>
</ul>
</li>
<li>强调</li>
<li>形象化</li>
</ol>
</li>
<li><p>word型</p>
<ul>
<li>分段</li>
<li>提炼关键字</li>
<li>配色</li>
<li>加图标</li>
<li>修改版面</li>
</ul>
</li>
<li><p>其他 </p>
<ul>
<li>拆分字</li>
<li>线框字<ul>
<li>=lorem() 自动生产英文</li>
</ul>
</li>
<li>层叠字</li>
<li>渐变字</li>
<li>倒影字</li>
</ul>
</li>
</ul>
<h1 id="2-形状"><a href="#2-形状" class="headerlink" title="2. 形状"></a>2. 形状</h1><ul>
<li>辅助表达<ul>
<li>流程</li>
<li>衬托文字</li>
<li>图标</li>
<li>分割<!-- 1. ctrl+M 新建幻灯片</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>ppt字体选择</p>
<ul>
<li>商务报告:黑体</li>
<li>广告宣传:粗黑硬，有力量感的字体</li>
<li>发布会:纤细字体(思源黑体)，显得高端优雅 </li>
<li>教学课件：宋体楷体</li>
<li>印刷阅读: 黑体 –&gt;</li>
</ul>
</li>
<li><p>文字高大上</p>
</li>
<li><p>求字体网</p>
<ul>
<li><a href="http://www.qiuziti.com/">www.qiuziti.com</a></li>
</ul>
</li>
<li><p>做海报</p>
<ul>
<li>设计-&gt;幻灯片大小设置-&gt;自定义A4</li>
<li>插入图片裁剪</li>
</ul>
</li>
<li><p>拆分字</p>
<ul>
<li>选中矩形和文字 选择拆分</li>
</ul>
</li>
<li><p>线框字</p>
<ul>
<li>=lorem() 自动生产英文</li>
</ul>
</li>
<li><p>层叠字</p>
</li>
<li><p>渐变字</p>
</li>
<li><p>倒影字</p>
</li>
</ol>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><ol>
<li>合并形状</li>
<li>编辑顶点</li>
<li>强化表达</li>
<li>分割内容区域</li>
</ol>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><ol>
<li><p>粒子，星辰，地球，星空</p>
</li>
<li><p>四原则</p>
<ul>
<li>对齐</li>
<li>对比</li>
<li>靠近</li>
<li>重复</li>
</ul>
</li>
<li><p>排版</p>
<ul>
<li>行间距 1.5</li>
<li>字间距 1.3</li>
<li>左右边距</li>
</ul>
</li>
<li><p>版面框架</p>
</li>
</ol>
<ul>
<li>配色<ul>
<li>主题色</li>
<li>辅助色（黑白）</li>
</ul>
</li>
<li>框架<ul>
<li>居中型</li>
<li>杂志</li>
<li>分割</li>
</ul>
</li>
</ul>
<ol start="5">
<li>表格</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>pytorch</title>
    <url>/2021/09/07/pytorch/</url>
    <content><![CDATA[<h2 id="1-anaconda"><a href="#1-anaconda" class="headerlink" title="1. anaconda"></a>1. anaconda</h2><span id="more"></span>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><ul>
<li><a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></li>
<li>检查gpu是否支持cuda：<a href="https://developer.nvidia.com/zh-cn/cuda-gpus">https://developer.nvidia.com/zh-cn/cuda-gpus</a></li>
</ul>
<ul>
<li><p>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:: 查看版本</span><br><span class="line">conda --version</span><br><span class="line">:: 查看所有可安装包</span><br><span class="line">conda list</span><br><span class="line">:: 查看安装的环境</span><br><span class="line">conda info --envs</span><br><span class="line">::搜索包版本</span><br><span class="line">conda search --full-name python</span><br><span class="line">::安装包</span><br><span class="line">conda install tensorflow=1.13.1</span><br><span class="line">::检查更新当前conda</span><br><span class="line">conda update conda  </span><br><span class="line">::创建虚拟环境</span><br><span class="line">conda create -n your_env_name python=X.X </span><br><span class="line">::激活虚拟环境</span><br><span class="line">windows: activate your_env_name</span><br><span class="line">linux: source activate your_env_name</span><br><span class="line">:: 关闭虚拟环境</span><br><span class="line">windows:conda deactivate</span><br><span class="line">linux: source deactivate</span><br><span class="line">:: 删除虚拟环境</span><br><span class="line">conda remove -n your_env_name(虚拟环境名称) --all</span><br><span class="line">:: 删除环境中某个包</span><br><span class="line">conda remove --name your_env_name package_name</span><br><span class="line"></span><br><span class="line">:: 切回默认源</span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure></li>
<li><p>安装cuda<br><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
</li>
<li><p>安装pytorch<br><a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p>
<ul>
<li>检测<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>非base环境安装jupyter</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install nb_conda</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>scala</title>
    <url>/2021/07/20/scala/</url>
    <content><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul>
<li>jdk:<a href="https://www.oracle.com/cn/java/technologies/javase-downloads.html">https://www.oracle.com/cn/java/technologies/javase-downloads.html</a><span id="more"></span>
<a href="https://www.scala-lang.org/download/">https://www.scala-lang.org/download/</a></li>
</ul>
<h2 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2. 基础知识"></a>2. 基础知识</h2><h3 id="2-1基本数据类型和变量"><a href="#2-1基本数据类型和变量" class="headerlink" title="2.1基本数据类型和变量"></a>2.1基本数据类型和变量</h3><ul>
<li><img src="/images/scala/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%8C%83%E5%9B%B4.png" title="图片"></li>
<li>字面量<ul>
<li><img src="/images/scala/%E5%AD%97%E9%9D%A2%E9%87%8F.png" title="图片"></li>
</ul>
</li>
<li>变量<ul>
<li>val 变量名:数据类型 = 初始值</li>
<li>var 变量名:数据类型 = 初始值 </li>
</ul>
</li>
</ul>
<h3 id="2-2-输入输出"><a href="#2-2-输入输出" class="headerlink" title="2.2 输入输出"></a>2.2 输入输出</h3><ul>
<li>输入<ul>
<li><img src="/images/scala/%E4%BB%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%AF%BB%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95.png" title="图片"></li>
</ul>
</li>
<li>输出<ul>
<li>print</li>
<li>println</li>
<li>printf</li>
</ul>
</li>
<li>字符串插值机制<ul>
<li>s<ul>
<li>$x,替换变量x的值</li>
<li>println(s”s=$s”)</li>
</ul>
</li>
<li>f<ul>
<li>$x,替换变量x的值并可以进行格式控制</li>
<li>println(f”f=$f%.1lf”)</li>
</ul>
</li>
</ul>
</li>
<li>写文件<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.<span class="type">PrintWriter</span></span><br><span class="line"><span class="keyword">val</span> outputFile = <span class="keyword">new</span> <span class="type">PrintWriter</span>(<span class="string">&quot;lx.txt&quot;</span>)</span><br><span class="line">outputFile.println(<span class="string">&quot;hellow world&quot;</span>)</span><br><span class="line">outputFile.close()</span><br></pre></td></tr></table></figure></li>
<li>读文件<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line">    <span class="keyword">val</span> inputFile = <span class="type">Source</span>.fromFile(<span class="string">&quot;lx.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> lines = inputFile.getLines</span><br><span class="line">    <span class="keyword">for</span>(line&lt;-lines)println(line)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-控制结构"><a href="#2-3-控制结构" class="headerlink" title="2.3 控制结构"></a>2.3 控制结构</h3><ol>
<li>if else<ul>
<li>可以赋值</li>
</ul>
</li>
<li>while</li>
<li>for循环：for(变量&lt;-表达式 if条件表达式){语句}<ul>
<li>for(i&lt;- 1 to 5 by 2)</li>
<li>for(i&lt;- 1 to 5 if i%2 == 0)</li>
<li>多个生成器用;隔开</li>
</ul>
</li>
<li>for推导式：for(变量&lt;-表达式 ) yield {语句}<ul>
<li>条件复合将变量的值返回出去</li>
</ul>
</li>
<li>异常处理<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> ex:<span class="type">FileNotFoundException</span></span><br><span class="line">    <span class="keyword">case</span> ex:<span class="type">IOException</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>循环控制<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util.control.<span class="type">Breaks</span>._</span><br><span class="line"><span class="comment">//break</span></span><br><span class="line">breakable&#123;</span><br><span class="line">    <span class="keyword">for</span>(i&lt;-arrya)</span><br><span class="line">        <span class="keyword">if</span>(条件)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//continue</span></span><br><span class="line"><span class="keyword">for</span>(i&lt;-array)&#123;</span><br><span class="line">    breakable&#123;</span><br><span class="line">        <span class="keyword">if</span>(条件)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-4-数据结构"><a href="#2-4-数据结构" class="headerlink" title="2.4 数据结构"></a>2.4 数据结构</h3><ol>
<li>数组Array<ul>
<li>val arr = new Array<a href="3">Int</a></li>
<li>val arr = Array(1,2,3)</li>
<li>arr(0)=1</li>
<li>多维<ul>
<li>val arr = Array.ofDim<a href="3,4">Int</a>  -三行四列</li>
</ul>
</li>
</ul>
</li>
<li>元组Tuple<ul>
<li>val tuple = (“1”,2)</li>
<li>输出println(tuple._1)</li>
</ul>
</li>
<li>容器Collection<ul>
<li>列表List：不可变相同类型序列<ul>
<li>var strList1=List(1,2,3)</li>
<li>var strList2 = 2::3::strList1</li>
</ul>
</li>
<li>向量Vector<ul>
<li>var vec1 = Vector(1,2)</li>
<li>var vec2 = vec1:+2</li>
</ul>
</li>
<li>Range<ul>
<li>var r = new Range(1,5,1)</li>
<li>1 until 5</li>
</ul>
</li>
<li>集合set（可变和不可变）<ul>
<li>scala.collection.mutable/immutable(默认)</li>
<li>vat mySet = Set(“123”,”456”)</li>
</ul>
</li>
<li>映射Map（可变和不可变）<ul>
<li>var univer = Map(“x”-&gt;”y”)</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="3-面向对象"><a href="#3-面向对象" class="headerlink" title="3. 面向对象"></a>3. 面向对象</h2><h3 id="3-1-类的定义"><a href="#3-1-类的定义" class="headerlink" title="3.1 类的定义"></a>3.1 类的定义</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value</span> </span>= x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value_=</span></span>(newX:<span class="type">Int</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(newX&gt;<span class="number">0</span>)  x=newX</span><br><span class="line">        <span class="comment">//对象.value_=(3)或对象.value=3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">方法名</span></span>(参数列表):返回结果类型=&#123;</span><br><span class="line">        <span class="comment">//void为unit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> x = <span class="keyword">new</span> <span class="type">Counter</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可见性<ul>
<li>无修饰 = public</li>
<li>private，本类型可见，嵌套类型可见</li>
<li>protected，本类型可见，继承类型可见</li>
</ul>
</li>
</ul>
<h3 id="3-2-构造器"><a href="#3-2-构造器" class="headerlink" title="3.2 构造器"></a>3.2 构造器</h3><ul>
<li>class 类名(var name:String)会自动生成name属性</li>
<li>任何一个构造器都要调用之前已经定义好的辅助构造器或主构造器<ul>
<li><img src="/images/scala/%E6%9E%84%E9%80%A0%E5%99%A8.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="3-3-单例对象"><a href="#3-3-单例对象" class="headerlink" title="3.3 单例对象"></a>3.3 单例对象</h3><ul>
<li>格式<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用object关键字去定义单例对象</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newX</span></span>()=&#123;</span><br><span class="line">        x+=<span class="number">1</span></span><br><span class="line">        x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>伴生对象<ul>
<li>同时定义class A和object A则互为伴生关系</li>
<li>彼此可以访问内部成员</li>
</ul>
</li>
<li>孤立对象<ul>
<li>object A没有与它同名的class</li>
</ul>
</li>
</ol>
<h3 id="3-4-apply方法"><a href="#3-4-apply方法" class="headerlink" title="3.4 apply方法"></a>3.4 apply方法</h3><ul>
<li>当出现-类名(参数)会自动寻找apply方法</li>
<li>函数可以通过-函数名.apply(参数) 以对象的形式调用<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(参数)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5-update方法"><a href="#3-5-update方法" class="headerlink" title="3.5 update方法"></a>3.5 update方法</h3><ul>
<li>当对带有括号并包括一到若干参数的对象进行赋值时编译器将调用update方法<ul>
<li>myArray(0)=12</li>
</ul>
</li>
</ul>
<h3 id="3-6-unapply"><a href="#3-6-unapply" class="headerlink" title="3.6 unapply"></a>3.6 unapply</h3><ul>
<li>根据对象把参数提取出来<ul>
<li><img src="/images/scala/unapply1.png" title="图片"></li>
<li><img src="/images/scala/unapply2.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="3-7-继承"><a href="#3-7-继承" class="headerlink" title="3.7 继承"></a>3.7 继承</h3><ol>
<li>抽象类<ul>
<li>类用abstract修饰</li>
<li>没有值或没有方法体就是抽象的  </li>
</ul>
</li>
<li>扩展类<ul>
<li>extends关键字</li>
<li>重载父类的抽象成员override可选，非抽象成员必须要有override</li>
</ul>
</li>
<li>Option类<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">books.get(<span class="string">&quot;hadoop&quot;</span>)</span><br><span class="line"><span class="comment">// 返回Sone对象</span></span><br><span class="line">books.get(<span class="string">&quot;hadoop&quot;</span>).get</span><br><span class="line"><span class="comment">// 返回book对象</span></span><br><span class="line">books.get(<span class="string">&quot;hadoop&quot;</span>).getOrElse(<span class="type">Book</span>(<span class="string">&quot;Unknown&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-8-特质"><a href="#3-8-特质" class="headerlink" title="3.8 特质"></a>3.8 特质</h3><ul>
<li>使用trait修饰类</li>
<li>混入特质 <ul>
<li><img src="/images/scala/%E6%B7%B7%E5%85%A5%E7%89%B9%E8%B4%A8.png" title="图片"></li>
</ul>
</li>
</ul>
<h3 id="3-9-模式匹配"><a href="#3-9-模式匹配" class="headerlink" title="3.9 模式匹配"></a>3.9 模式匹配</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">变量 <span class="keyword">match</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> &#x27;a&#x27; =&gt; println(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> i:<span class="type">Int</span> =&gt; println(i+<span class="string">&quot;这是一个整型&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">if</span>(<span class="number">2</span>&gt;<span class="number">1</span>) =&gt; println(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt;   println(<span class="string">&quot;匹配失败&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>case 类<ul>
<li>case class Car(brand:String)</li>
<li>自动生成伴生类</li>
</ul>
</li>
</ul>
<h2 id="4-函数式编程"><a href="#4-函数式编程" class="headerlink" title="4. 函数式编程"></a>4. 函数式编程</h2><h3 id="4-1-函数的定义与使用"><a href="#4-1-函数的定义与使用" class="headerlink" title="4.1 函数的定义与使用"></a>4.1 函数的定义与使用</h3><ul>
<li>函数类型<ul>
<li><img src="/images/scala/%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B.png" title="图片"></li>
<li>(Int)=&gt;Int</li>
</ul>
</li>
<li>函数的“值”<ul>
<li>(value)=&gt;{value+=1}</li>
</ul>
</li>
<li>匿名函数<ul>
<li>(num:Int)=&gt;num*2</li>
</ul>
</li>
<li>_的使用<ul>
<li>val counter = (_:Int) + 1 等效于x:Int=&gt;x+1 </li>
<li>val add = (_:Int) + (_:Int) 等效于(a:Int,b:Int)=&gt;a+b</li>
</ul>
</li>
</ul>
<h3 id="4-2-高阶函数"><a href="#4-2-高阶函数" class="headerlink" title="4.2 高阶函数"></a>4.2 高阶函数</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f:<span class="type">Int</span>=&gt;<span class="type">Int</span>,a:<span class="type">Int</span>,b:<span class="type">Int</span>)=&#123;</span><br><span class="line">    f(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-针对容器的操作"><a href="#4-3-针对容器的操作" class="headerlink" title="4.3 针对容器的操作"></a>4.3 针对容器的操作</h3><ol>
<li>遍历foreach</li>
<li>映射<ul>
<li>.map</li>
<li>flatMap</li>
</ul>
</li>
<li>过滤 .filter</li>
<li>规约 .reduce<ul>
<li>var list = List(1,2,3,4,5)</li>
<li>list.reduce(_+_)</li>
<li>.fold 可以设置初始值</li>
<li>var list = List(1,2,3,4,5)</li>
<li>list.fold(10)(_+_)</li>
</ul>
</li>
</ol>
<h3 id="4-4-函数式编程"><a href="#4-4-函数式编程" class="headerlink" title="4.4 函数式编程"></a>4.4 函数式编程</h3>]]></content>
  </entry>
  <entry>
    <title>ubuntu</title>
    <url>/2021/07/26/ubuntu/</url>
    <content><![CDATA[<ul>
<li>安装ssh服务<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">ps -e | grep ssh <span class="comment"># 确认服务启动</span></span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>换源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="comment"># sudo   chmod   777   /etc/apt/sources.list #更改权限</span></span><br><span class="line">sudo apt-get install vim</span><br><span class="line"></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"> <span class="comment"># 清空文件 在vim中输入dG</span></span><br><span class="line"><span class="comment">#  阿里镜像源</span></span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line"><span class="comment"># sudo apt-get -f install #解决依赖问题</span></span><br><span class="line"><span class="comment"># sudo apt-get install software-properties-common &amp;&amp; apt-get update #解决add-apt-repository: command not found</span></span><br></pre></td></tr></table></figure></li>
<li>添加root密码<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>数据</title>
    <url>/2021/07/30/vmware/</url>
    <content><![CDATA[<h2 id="1-VMware安装"><a href="#1-VMware安装" class="headerlink" title="1. VMware安装"></a>1. VMware安装</h2><ul>
<li><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></li>
<li>密钥：YF390-0HF8P-M81RQ-2DXQE-M2UT6</li>
</ul>
<h2 id="2-vivado"><a href="#2-vivado" class="headerlink" title="2. vivado"></a>2. vivado</h2>]]></content>
  </entry>
  <entry>
    <title>人工智能基础-黑马</title>
    <url>/2021/08/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80-%E9%BB%91%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="1-机器学习概述"><a href="#1-机器学习概述" class="headerlink" title="1.机器学习概述"></a>1.机器学习概述</h2> <span id="more"></span>
<ol>
<li><p>人工智能概述</p>
<ol>
<li>人工智能起源<ul>
<li>图灵测试</li>
<li>达特茅斯会议</li>
</ul>
</li>
<li>人工智能三个阶段<ul>
<li>1980年代是正式成形期</li>
<li>1990-2010年代是蓬勃发展期</li>
<li>2012年之后是深度学习期</li>
</ul>
</li>
<li>人工智能、机器学习和深度学习<ul>
<li>机器学习是人工智能的一个实现途径</li>
<li>深度学习是机器学习的一个方法发展而来</li>
</ul>
</li>
<li>主要分支介绍<ol>
<li>计算机视觉<ul>
<li>eg:人脸识别</li>
</ul>
</li>
<li>自然语言处理<ul>
<li>语音识别</li>
<li>语义识别</li>
</ul>
</li>
<li>机器人</li>
</ol>
</li>
<li>人工智能必备三要素【***】<ul>
<li>数据</li>
<li>算法</li>
<li>计算力</li>
</ul>
</li>
<li>gpu,cpu<ul>
<li>gpu – 计算密集型</li>
<li>cpu – IO密集型</li>
</ul>
</li>
</ol>
</li>
</ol>
<hr>
<ol start="2">
<li>机器学习工作流程<ol>
<li>定义<ul>
<li>数据</li>
<li>自动分析获得模型</li>
<li>预测</li>
<li>从数据中自动分析获得模型，并利用模型对未知数据进行预测</li>
</ul>
</li>
<li>工作流程<ol>
<li>获取数据</li>
<li>数据基本处理</li>
<li>特征工程</li>
<li>机器学习（模型训练）</li>
<li>模型评估</li>
</ol>
</li>
<li>获取到的数据集介绍<ol>
<li>专有名词<ul>
<li>样本</li>
<li>特征</li>
<li>目标值（标签值）</li>
<li>特征值</li>
</ul>
</li>
<li>数据类型构成<ul>
<li>类型一:特征值+目标值目标值分为是离散还是连续</li>
<li>类型二： 只有特征值，没有目标值</li>
</ul>
</li>
<li>数据划分<ul>
<li>训练数据（训练集） – 构建模型 0.7–0.8</li>
<li>测试数据（测试集） – 模型评估 0.2–0.3</li>
</ul>
</li>
</ol>
</li>
<li>数据基本处理<ul>
<li>对数进行缺失值、去除异常值等处理</li>
</ul>
</li>
<li>特征工程<ol>
<li>定义:把数据转换成为机器更容易识别的数据</li>
<li>为什么需要特征工程:数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已</li>
<li>包含内容<ul>
<li>特征提取</li>
<li>特征预处理</li>
<li>特征降维</li>
</ul>
</li>
</ol>
</li>
<li>机器学习<ul>
<li>选择合适的算法对模型进行训练</li>
</ul>
</li>
<li>模型评估<ul>
<li>对训练好的模型进行评估</li>
</ul>
</li>
</ol>
</li>
</ol>
<hr>
<ol start="3">
<li>机器学习算法分类<ol>
<li>监督学习 – 有特征值，有目标值<ul>
<li>目标值连续– 回归</li>
<li>目标值离散– 分类</li>
</ul>
</li>
<li>无监督学习 – 仅有特征值</li>
<li>半监督学习<ul>
<li>有特征值，但是一部分数据有目标值，一部分没有</li>
</ul>
</li>
<li>强化学习<ul>
<li>动态过程，上一步数据的输出是下一步数据的输入</li>
<li>四要素：agent, action, environment,Reward,</li>
</ul>
</li>
</ol>
</li>
</ol>
<hr>
<ol start="4">
<li>模型评估<ol>
<li>分类模型评估<ul>
<li>准确率</li>
<li>精确率</li>
<li>召回率</li>
<li>F1-score</li>
<li>AUC指标</li>
</ul>
</li>
<li>回归模型评估<ul>
<li>均方根误差</li>
<li>相对平方误差</li>
<li>平均绝对误差</li>
<li>相对绝对误差</li>
<li>决定系数</li>
</ul>
</li>
<li>拟合<ul>
<li>欠拟合</li>
<li>过拟合</li>
</ul>
</li>
</ol>
</li>
</ol>
<hr>
<ol start="5">
<li>机器学习基础环境安装与使用</li>
</ol>
<ul>
<li>Jupyter Notebook<ul>
<li>通用：<ul>
<li> Shift+Enter，执行本单元代码，并跳转到下一单元</li>
<li>Ctrl+Enter，执行本单元代码，留在本单元</li>
</ul>
</li>
<li>命令模式<ul>
<li>Y，cell切换到Code模式</li>
<li>M，cell切换到Markdown模式</li>
<li>A，在当前cell的上面添加cell</li>
<li>B，在当前cell的下面添加cell</li>
<li>双击D：删除当前cell</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-Matplotlib"><a href="#2-Matplotlib" class="headerlink" title="2. Matplotlib"></a>2. Matplotlib</h2><ol>
<li>matplotlib三层结构<ul>
<li>容器层<ul>
<li>canvas</li>
<li>figure</li>
<li>axes</li>
</ul>
</li>
<li>辅助显示层<ul>
<li>添加x轴，y轴描述，标题。。。</li>
</ul>
</li>
<li>图像层<ul>
<li>绘制什么图像的声明</li>
</ul>
</li>
<li>例<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">20</span>,<span class="number">8</span>),dpi=<span class="number">100</span>)</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">y = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<hr>
<ol start="2">
<li>折线图(plot)与基础绘图功能<ol>
<li>图像保存<ul>
<li>plt.savefig()</li>
<li>注意：图像保存一定要放到show前面</li>
</ul>
</li>
<li>添加x轴,y轴刻度<ul>
<li>plt.xticks</li>
<li>plt.yticks<br>注意:第一个参数必须是数字,如果不是数字,需要进行值替换</li>
</ul>
</li>
<li>添加网格<br>  plt.grid()<pre><code>  参数:
  linestyle -- 绘制网格的方式
  alpha -- 透明度
</code></pre>
</li>
<li>添加描述信息<br>  plt.xlabel(“时间”)<br>  plt.ylabel(“温度”)<br>  plt.title(“一小时温度变化图”, fontsize=20)</li>
<li>多次plot<br>  直接进行绘制</li>
<li>显示图例<br>  plt.legend()<br>  注意:需要在显示之前,声明plot里面的具体值</li>
<li>多个坐标系图像显示【###】<br>  fig, axes = plt.subplots()<pre><code>  nrows -- 几行
  ncols -- 几列
  注意:有些方法需要添加set_*
</code></pre>
</li>
<li>折线图应用场景<br>  1.表示数据变化<br>  2.绘制一些数学图像</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>其他内容</title>
    <url>/2021/10/10/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="1-Winograd-算法"><a href="#1-Winograd-算法" class="headerlink" title="1. Winograd 算法"></a>1. Winograd 算法</h2><ol>
<li>Convolution<ul>
<li>先将其中一个序列镜像翻转</li>
<li>然后两个序列相向移动</li>
<li>每次重合的部分做点乘累加</li>
<li>直到没有重合</li>
</ul>
</li>
<li>Correlation<ul>
<li>两个序列shoul首元素对其</li>
<li>短序列向尾部移动，做点乘累加，直到尾对齐</li>
<li><img src="/images/%E5%85%B6%E4%BB%96%E5%86%85%E5%AE%B9/Convolution%E5%92%8CCorrelation%E4%BE%8B%E5%AD%90.jpg" title="my-logo"></li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>协议</title>
    <url>/2021/11/22/%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数值分析</title>
    <url>/2021/10/12/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="1-误差"><a href="#1-误差" class="headerlink" title="1. 误差"></a>1. 误差</h1><h2 id="1-1-绝对误差"><a href="#1-1-绝对误差" class="headerlink" title="1.1 绝对误差"></a>1.1 绝对误差</h2><span id="more"></span>
<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%BB%9D%E5%AF%B9%E8%AF%AF%E5%B7%AE.png" title="图片"></li>
</ul>
<h2 id="1-2-相对误差"><a href="#1-2-相对误差" class="headerlink" title="1.2 相对误差"></a>1.2 相对误差</h2><ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%9B%B8%E5%AF%B9%E8%AF%AF%E5%B7%AE.png" title="图片"></li>
</ul>
<h2 id="1-3-有效数字"><a href="#1-3-有效数字" class="headerlink" title="1.3 有效数字"></a>1.3 有效数字</h2><ul>
<li>设数x是数x*的近似值，如果x的绝对误差限是它的某一数位的半个单位，并且从x左起第一个非零数字到该数位共有n位，则称这n个数字为x的有效数字，也称用x近似x*时具有n位有效数字。</li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%972.png" title="图片"></li>
</ul>
<h2 id="1-4-有效数字和相对误差的关系"><a href="#1-4-有效数字和相对误差的关系" class="headerlink" title="1.4 有效数字和相对误差的关系"></a>1.4 有效数字和相对误差的关系</h2><ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%9C%89%E6%95%88%E6%95%B0%E5%AD%97%E5%92%8C%E7%9B%B8%E5%AF%B9%E8%AF%AF%E5%B7%AE%E7%9A%84%E5%85%B3%E7%B3%BB.png" title="图片"></li>
</ul>
<h2 id="1-5-数值计算的若干原则"><a href="#1-5-数值计算的若干原则" class="headerlink" title="1.5 数值计算的若干原则"></a>1.5 数值计算的若干原则</h2><ol>
<li>避免两个数相减</li>
</ol>
<h1 id="2-解线性方程组的直接方法"><a href="#2-解线性方程组的直接方法" class="headerlink" title="2. 解线性方程组的直接方法"></a>2. 解线性方程组的直接方法</h1><h2 id="2-1-高斯消去法"><a href="#2-1-高斯消去法" class="headerlink" title="2.1 高斯消去法"></a>2.1 高斯消去法</h2><ul>
<li>过程<ol>
<li>消元</li>
<li>回代</li>
</ol>
</li>
<li>定理<ul>
<li>可以用高斯消元法的充分必要条件&lt;==&gt;系数矩阵各阶顺序主子式不为零</li>
</ul>
</li>
<li>计算量<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%A1%BA%E5%BA%8F%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83%E6%B3%95%E8%AE%A1%E7%AE%97%E9%87%8F.png" title="图片"><h2 id="2-2-选主元素的高斯消去法"><a href="#2-2-选主元素的高斯消去法" class="headerlink" title="2.2 选主元素的高斯消去法"></a>2.2 选主元素的高斯消去法</h2></li>
</ul>
</li>
<li>顺序高斯消去法有舍入误差</li>
<li>列主元素<ul>
<li>只要系数矩阵不为0则可用此方法</li>
</ul>
</li>
<li>全主元素<h2 id="2-3-Gauss-Jordan消元法"><a href="#2-3-Gauss-Jordan消元法" class="headerlink" title="2.3 Gauss-Jordan消元法"></a>2.3 Gauss-Jordan消元法</h2></li>
</ul>
<ol>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%95%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%971.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%AB%98%E6%96%AF%E6%B6%88%E5%8E%BB%E6%B3%95%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%972.png" title="图片"></li>
</ol>
<h2 id="2-4-直接三角分解法"><a href="#2-4-直接三角分解法" class="headerlink" title="2.4 直接三角分解法"></a>2.4 直接三角分解法</h2><ul>
<li>n阶方阵A的各阶顺序主子式不为0则存在唯一的LU</li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/Doolittle%E5%88%86%E8%A7%A31.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/Doolittle%E5%88%86%E8%A7%A32.png" title="图片"></li>
<li>类似与顺序高斯消去法但在计算同系数线性方程组，可大大节省计算量</li>
</ul>
<h2 id="2-5-平方根法与改进的平方根法"><a href="#2-5-平方根法与改进的平方根法" class="headerlink" title="2.5 平方根法与改进的平方根法"></a>2.5 平方根法与改进的平方根法</h2><ul>
<li>设A为实对称正定矩阵，有唯一分解A=LU，将U拆分为对角矩阵和单位上三角矩阵相乘的形式U=DM</li>
</ul>
<ol>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%B9%B3%E6%96%B9%E6%A0%B9%E6%B3%951.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%B9%B3%E6%96%B9%E6%A0%B9%E6%B3%952.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%B9%B3%E6%96%B9%E6%A0%B9%E6%B3%953.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%B9%B3%E6%96%B9%E6%A0%B9%E6%B3%954.png" title="图片"></li>
</ol>
<ul>
<li>改进的平方根法</li>
</ul>
<h2 id="2-6-追赶法"><a href="#2-6-追赶法" class="headerlink" title="2.6 追赶法"></a>2.6 追赶法</h2><ul>
<li>要求三对角矩阵A的各阶顺序主子式都不为零</li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E8%BF%BD%E8%B5%B6%E6%B3%951.png" title="图片"></li>
</ul>
<h1 id="3-解线性方程组迭代法"><a href="#3-解线性方程组迭代法" class="headerlink" title="3. 解线性方程组迭代法"></a>3. 解线性方程组迭代法</h1><h2 id="3-1-迭代法建立"><a href="#3-1-迭代法建立" class="headerlink" title="3.1 迭代法建立"></a>3.1 迭代法建立</h2><ul>
<li>考虑的问题<ol>
<li>迭代法如何建立<h2 id="3-2-Jacobi迭代法"><a href="#3-2-Jacobi迭代法" class="headerlink" title="3.2 Jacobi迭代法"></a>3.2 Jacobi迭代法</h2></li>
</ol>
</li>
<li>建立<ol>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%9B%85%E5%8F%AF%E6%AF%94%E6%96%B9%E7%A8%8B.png" title="图片"></li>
</ol>
</li>
<li>迭代矩阵<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%9B%85%E5%8F%AF%E6%AF%94%E8%BF%AD%E4%BB%A3%E7%9F%A9%E9%98%B5.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="3-3-Gauss-Seidel"><a href="#3-3-Gauss-Seidel" class="headerlink" title="3.3 Gauss-Seidel"></a>3.3 Gauss-Seidel</h2><ul>
<li>建立<ol>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E9%AB%98%E6%96%AF%E8%B5%9B%E5%BE%B7%E5%B0%94.png" title="图片"></li>
</ol>
</li>
</ul>
<h2 id="3-4-收敛条件"><a href="#3-4-收敛条件" class="headerlink" title="3.4 收敛条件"></a>3.4 收敛条件</h2><ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%94%B6%E6%95%9B%E6%9D%A1%E4%BB%B6.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%94%B6%E6%95%9B%E6%9D%A1%E4%BB%B61.png" title="图片"></li>
</ul>
<h1 id="4-非线性方程与方程组的数值解法"><a href="#4-非线性方程与方程组的数值解法" class="headerlink" title="4.非线性方程与方程组的数值解法"></a>4.非线性方程与方程组的数值解法</h1><h2 id="4-1-二分法"><a href="#4-1-二分法" class="headerlink" title="4.1 二分法"></a>4.1 二分法</h2><h2 id="4-2-不动点迭代"><a href="#4-2-不动点迭代" class="headerlink" title="4.2 不动点迭代"></a>4.2 不动点迭代</h2><ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%8D%E5%8A%A8%E7%82%B9%E8%BF%AD%E4%BB%A3%E8%BF%87%E7%A8%8B.png" title="图片"></li>
<li>收敛<ul>
<li>压缩性<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%8D%E5%8A%A8%E7%82%B9%E8%BF%AD%E4%BB%A3%E8%BF%87%E7%A8%8B.png" title="图片"></li>
</ul>
</li>
<li>映内性<ul>
<li>迭代之落在区间内</li>
</ul>
</li>
</ul>
</li>
<li>误差估计<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%8D%E5%8A%A8%E7%82%B9%E8%BF%AD%E4%BB%A3%E8%AF%AF%E5%B7%AE%E4%BC%B0%E8%AE%A1.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="4-3-牛顿迭代法"><a href="#4-3-牛顿迭代法" class="headerlink" title="4.3 牛顿迭代法"></a>4.3 牛顿迭代法</h2><ul>
<li>公式<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E5%8E%9F%E7%90%86.png" title="图片"></li>
</ul>
</li>
<li>收敛<ul>
<li>若函数f在单根x*附近存在连续的二阶导数 且 初始值x0充分靠近x* =&gt; 收敛</li>
</ul>
</li>
</ul>
<h1 id="6-函数逼近与曲线拟合"><a href="#6-函数逼近与曲线拟合" class="headerlink" title="6.函数逼近与曲线拟合"></a>6.函数逼近与曲线拟合</h1><h2 id="6-2-常用的正交多项式"><a href="#6-2-常用的正交多项式" class="headerlink" title="6.2 常用的正交多项式"></a>6.2 常用的正交多项式</h2><ol>
<li>Legendre多项式<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/Legendre%E5%A4%9A%E9%A1%B9%E5%BC%8F.png" title="图片"></li>
</ul>
</li>
<li>Chebyshev多项式<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/Chebyshev%E5%A4%9A%E9%A1%B9%E5%BC%8F.png" title="图片"></li>
</ul>
</li>
<li>Laguere多项式<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/Laguere%E5%A4%9A%E9%A1%B9%E5%BC%8F.png" title="图片"></li>
</ul>
</li>
</ol>
<h2 id="6-3-最佳平方逼近"><a href="#6-3-最佳平方逼近" class="headerlink" title="6.3 最佳平方逼近"></a>6.3 最佳平方逼近</h2><ul>
<li>函数逼近基本问题<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%87%BD%E6%95%B0%E9%80%BC%E8%BF%91%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98.png" title="图片"></li>
</ul>
</li>
<li>最佳一致逼近<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%9C%80%E4%BD%B3%E4%B8%80%E8%87%B4%E9%80%BC%E8%BF%91.png" title="图片"></li>
<li>与原直线偏差最大的地方达到最小</li>
</ul>
</li>
<li>最佳平方逼近<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%9C%80%E4%BD%B3%E5%B9%B3%E6%96%B9%E9%80%BC%E8%BF%91.png" title="图片"></li>
<li>与原直线在区间偏差面积最小</li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%9C%80%E4%BD%B3%E5%B9%B3%E6%96%B9%E9%80%BC%E8%BF%91%E8%AE%A1%E7%AE%97.png" title="图片"></li>
</ul>
</li>
</ul>
<h1 id="7-数值积分与数值微分"><a href="#7-数值积分与数值微分" class="headerlink" title="7. 数值积分与数值微分"></a>7. 数值积分与数值微分</h1><h2 id="7-1-求积公式"><a href="#7-1-求积公式" class="headerlink" title="7.1 求积公式"></a>7.1 求积公式</h2><ul>
<li>求积公式的代数精度<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%9A%84%E4%BB%A3%E6%95%B0%E7%B2%BE%E5%BA%A6.png" title="图片"></li>
</ul>
</li>
<li>插值型求积公式<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%8F%92%E5%80%BC%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F.png" title="图片"></li>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%8F%92%E5%80%BC%E5%9E%8B%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E4%BD%99%E9%A1%B9.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="7-1-牛顿-柯特斯"><a href="#7-1-牛顿-柯特斯" class="headerlink" title="7.1 牛顿-柯特斯"></a>7.1 牛顿-柯特斯</h2><ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%89%9B%E9%A1%BF%E6%9F%AF%E7%89%B9%E6%96%AF%E5%85%AC%E5%BC%8F.png" title="图片"></li>
<li>截断误差<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E7%89%9B%E9%A1%BF-%E6%9F%AF%E7%89%B9%E6%96%AF%E5%85%AC%E5%BC%8F%E6%88%AA%E6%96%AD%E8%AF%AF%E5%B7%AE.png" title="图片"></li>
</ul>
<h2 id="7-2-复化求积公式"><a href="#7-2-复化求积公式" class="headerlink" title="7.2 复化求积公式"></a>7.2 复化求积公式</h2><ul>
<li><p><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%A4%8D%E5%8C%96%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F.png" title="图片"></p>
</li>
<li><p>截断误差<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%A4%8D%E5%8C%96%E6%B1%82%E7%A7%AF%E5%85%AC%E5%BC%8F%E7%9A%84%E6%88%AA%E6%96%AD%E8%AF%AF%E5%B7%AE.png" title="图片"></p>
</li>
</ul>
<h1 id="8-常微分方程的数值解法"><a href="#8-常微分方程的数值解法" class="headerlink" title="8. 常微分方程的数值解法"></a>8. 常微分方程的数值解法</h1><ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%80%E9%98%B6%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.png" title="图片"></li>
<li>lipschitz条件<ul>
<li><img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/lipschitz%E6%9D%A1%E4%BB%B6.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="8-1-Euler方法"><a href="#8-1-Euler方法" class="headerlink" title="8.1 Euler方法"></a>8.1 Euler方法</h2><ul>
<li>一阶向前差分（一阶）<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%80%E9%98%B6%E5%90%91%E5%89%8D%E5%B7%AE%E5%88%86.png" title="图片"><br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%80%E9%98%B6%E5%90%91%E5%89%8D%E5%B7%AE%E5%88%861.png" title="图片"></li>
<li>后退的Euler方法（一阶）<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%8F%B3%E7%9F%A9%E5%BD%A2%E7%A7%AF%E5%88%86.png" title="图片"></li>
<li>梯形方法（二阶）<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%A2%AF%E5%BD%A2%E7%9F%A9%E5%BD%A2%E7%A7%AF%E5%88%86.png" title="图片"></li>
<li>改进的Euler（二阶）<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%94%B9%E8%BF%9B%E7%9A%84%E6%AC%A7%E6%8B%89.png" title="图片"><h2 id="8-3-Runge-Kutta方法"><a href="#8-3-Runge-Kutta方法" class="headerlink" title="8.3 Runge-Kutta方法"></a>8.3 Runge-Kutta方法</h2></li>
<li>R级显式R-K方法<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E6%94%B9%E8%BF%9B%E7%9A%84%E6%AC%A7%E6%8B%89.png" title="图片"></li>
<li>三级式R-K方法<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E4%B8%89%E9%98%B6R-K.png" title="图片"></li>
<li>四级式R-K方法<br>  <img src="/images/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/%E5%9B%9B%E9%98%B6R-K.png" title="图片"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>数据</title>
    <url>/2021/07/29/%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="1-anaconda"><a href="#1-anaconda" class="headerlink" title="1. anaconda"></a>1. anaconda</h2><span id="more"></span>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><ul>
<li><p><a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></p>
</li>
<li><p>检查gpu是否支持cuda：<a href="https://developer.nvidia.com/zh-cn/cuda-gpus">https://developer.nvidia.com/zh-cn/cuda-gpus</a></p>
</li>
<li><p>换源(替换掉用户目录下.condarc)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">  - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">show_channel_urls: true</span><br><span class="line">ssl_verify: false</span><br></pre></td></tr></table></figure></li>
<li><p>在powershell 中需要执行</p>
<ul>
<li>conda init powershell</li>
<li>conda config –set auto_activate_base false #取消一打开默认base环境</li>
</ul>
</li>
<li><p>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:: 查看版本</span><br><span class="line">conda --version</span><br><span class="line">:: 查看所有可安装包</span><br><span class="line">conda list</span><br><span class="line">:: 查看安装的环境</span><br><span class="line">conda info --envs</span><br><span class="line">::搜索包版本</span><br><span class="line">conda search --full-name python</span><br><span class="line">::安装包</span><br><span class="line">conda install tensorflow=1.13.1</span><br><span class="line">::检查更新当前conda</span><br><span class="line">conda update conda  </span><br><span class="line">::创建虚拟环境</span><br><span class="line">conda create -n your_env_name python=X.X </span><br><span class="line">::激活虚拟环境</span><br><span class="line">windows: activate your_env_name</span><br><span class="line">linux: source activate your_env_name</span><br><span class="line">:: 关闭虚拟环境</span><br><span class="line">windows:conda deactivate</span><br><span class="line">linux: source deactivate</span><br><span class="line">:: 删除虚拟环境</span><br><span class="line">conda remove -n your_env_name(虚拟环境名称) --all</span><br><span class="line">:: 删除环境中某个包</span><br><span class="line">conda remove --name your_env_name package_name</span><br><span class="line"></span><br><span class="line">:: 换源</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line">:: 切回默认源</span><br><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure></li>
<li><p>安装cuda<br><a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p>
</li>
<li><p>安装pytorch<br><a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p>
</li>
</ul>
<h2 id="2-scoop"><a href="#2-scoop" class="headerlink" title="2. scoop"></a>2. scoop</h2><ul>
<li>安装<ul>
<li>(没有梯子)<a href="https://blog.csdn.net/weixin_43870822/article/details/109162738?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_43870822/article/details/109162738?spm=1001.2014.3001.5501</a></li>
</ul>
</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置powershell</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br><span class="line"><span class="comment"># 安装到指定目录</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="string">&#x27;F:\tool\scoop&#x27;</span>,<span class="string">&#x27;User&#x27;</span>)</span><br><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;F:\tool\scoop&#x27;</span></span><br><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定-g安装目录(F:\tool\scoop_global)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$env:SCOOP_GLOBAL</span>=<span class="string">&#x27;F:\tool\scoop_global&#x27;</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP_GLOBAL&#x27;</span>,<span class="string">&#x27;F:\tool\scoop_global&#x27;</span>,<span class="string">&#x27;Machine&#x27;</span>)</span><br><span class="line"><span class="comment">#提高下载速度</span></span><br><span class="line">scoop install aria2</span><br></pre></td></tr></table></figure>

<ul>
<li>命令<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载软件</span></span><br><span class="line">scoop uninstall <span class="number">7</span>zip</span><br><span class="line"><span class="comment"># 更新bucket库</span></span><br><span class="line">scoop update</span><br><span class="line">scoop update <span class="number">7</span>zip <span class="comment">#更新7zip</span></span><br><span class="line"></span><br><span class="line">scoop * <span class="comment">#更新全部</span></span><br><span class="line"><span class="comment"># 移除所有旧版本</span></span><br><span class="line">scoop cleanup *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">scoop install python@<span class="number">3.7</span>.<span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bucket软件库</span></span><br><span class="line">scoop bucket add main <span class="comment"># 默认</span></span><br><span class="line">scoop bucket add extras <span class="comment"># 推荐</span></span><br><span class="line">scoop bucket add versions</span><br><span class="line">scoop bucket add nightlies</span><br><span class="line">scoop bucket add nirsoft</span><br><span class="line">scoop bucket add php</span><br><span class="line">scoop bucket add nerd<span class="literal">-fonts</span></span><br><span class="line">scoop bucket add nonportable</span><br><span class="line">scoop bucket add java</span><br><span class="line">scoop bucket add games</span><br><span class="line">scoop bucket add jetbrains <span class="comment"># 推荐</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-logisim"><a href="#3-logisim" class="headerlink" title="3. logisim"></a>3. logisim</h2><ul>
<li>地址: <a href="https://sourceforge.net/projects/circuit/">https://sourceforge.net/projects/circuit/</a></li>
<li><a href="https://www.lanzoux.com/iad6mmd">https://www.lanzoux.com/iad6mmd</a><blockquote>
<p>start min java -jar logisim-win-2.7.1.exe</p>
</blockquote>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>机器学习</title>
    <url>/2021/07/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="1-支持向量机"><a href="#1-支持向量机" class="headerlink" title="1.支持向量机"></a>1.支持向量机</h2><span id="more"></span>
<h3 id="1-1线性可分的定义"><a href="#1-1线性可分的定义" class="headerlink" title="1.1线性可分的定义`"></a>1.1线性可分的定义`</h3><p><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%8F%AF%E5%88%86%E5%AE%9A%E4%B9%89%E6%96%87%E5%AD%97.png" title="图片"><br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%BA%BF%E6%80%A7%E5%8F%AF%E5%88%86%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F.png" title="图片"></p>
<h3 id="1-2-最优分类直线"><a href="#1-2-最优分类直线" class="headerlink" title="1.2 最优分类直线"></a>1.2 最优分类直线</h3><ul>
<li>该直线分开了两类</li>
<li>该直线最大化间隔</li>
<li>该直线处于间隔中间</li>
</ul>
<h3 id="1-3-线性可分-寻找最大间隔"><a href="#1-3-线性可分-寻找最大间隔" class="headerlink" title="1.3 线性可分-寻找最大间隔"></a>1.3 线性可分-寻找最大间隔</h3><ul>
<li><p>优化方式<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E5%8C%96%E9%97%B4%E9%9A%94%E8%B6%85%E5%B9%B3%E9%9D%A2%E9%99%90%E5%88%B6.png" title="图片"></p>
</li>
<li><p>事实1<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E4%BA%8B%E5%AE%9E1.png" title="图片"></p>
</li>
<li><p>事实2<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E4%BA%8B%E5%AE%9E2.png" title="图片"></p>
</li>
<li><p>用a去缩放Ωb<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%94%A8a%E5%8E%BB%E7%BC%A9%E6%94%BE%CE%A9b.png" title="图片"></p>
</li>
<li><p>凸优化问题-二次规划问题</p>
<ul>
<li>目标函数：是二次项</li>
<li>限制条件：是一次项</li>
<li>要么无解，要么只有最小值唯一解</li>
</ul>
</li>
</ul>
<h3 id="1-4-线性不可分"><a href="#1-4-线性不可分" class="headerlink" title="1.4 线性不可分"></a>1.4 线性不可分</h3><ul>
<li>放松限制条件，设置松弛变量δ<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%94%BE%E6%9D%BE%E9%99%90%E5%88%B6%E6%9D%A1%E4%BB%B6.png" title="图片"></li>
<li>改造后的支持向量机优化版本<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%94%B9%E9%80%A0%E5%90%8E%E7%9A%84%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E4%BC%98%E5%8C%96%E7%89%88%E6%9C%AC.png" title="图片"></li>
</ul>
<h3 id="1-5-低维到高维的映射"><a href="#1-5-低维到高维的映射" class="headerlink" title="1.5 低维到高维的映射"></a>1.5 低维到高维的映射</h3><ul>
<li><p>例</p>
<table>
<thead>
<tr>
<th align="center">图像</th>
<th align="center">坐标</th>
<th align="center">映射</th>
<th align="center">结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%90%E4%BD%8E%E7%9A%84%E5%9B%BE%E5%BD%A2.png" title="图片"></td>
<td align="center"><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%90%E4%BD%8E%E7%9A%84%E5%9D%90%E6%A0%87.png" title="图片"></td>
<td align="center"><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%90%E4%BD%8E%E5%88%B0%E9%AB%98%E6%98%A0%E5%B0%84.png" title="图片"></td>
<td align="center"><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%90%E4%BD%8E%E5%88%B0%E9%AB%98%E7%BB%93%E6%9E%9C.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>优化<br><img src="/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%90%E4%BD%8E%E5%88%B0%E9%AB%98%E4%BC%98%E5%8C%96.png" title="图片"></p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>模拟电子技术</title>
    <url>/2021/08/08/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="1-半导体"><a href="#1-半导体" class="headerlink" title="1. 半导体"></a>1. 半导体</h1><span id="more"></span>
<h2 id="1-1-本征与杂志半导体"><a href="#1-1-本征与杂志半导体" class="headerlink" title="1.1 本征与杂志半导体"></a>1.1 本征与杂志半导体</h2><ul>
<li>导电特性<ul>
<li>光敏性</li>
<li>热敏性</li>
<li>掺杂性</li>
</ul>
</li>
<li>概念<ul>
<li>本征半导体：纯净的半导体</li>
<li>空穴</li>
<li>自由电子</li>
<li>本征激发</li>
<li>杂志半导体<ul>
<li>N 型（5价）</li>
<li>P 型（3价）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-2-PN结"><a href="#1-2-PN结" class="headerlink" title="1.2 PN结"></a>1.2 PN结</h2><ul>
<li>扩散运动：加强电厂</li>
<li>飘逸运动</li>
<li>结电容效应</li>
</ul>
<h2 id="1-3-二极管"><a href="#1-3-二极管" class="headerlink" title="1.3 二极管"></a>1.3 二极管</h2><ul>
<li><p>按结构分类</p>
<table>
<thead>
<tr>
<th align="center">点接触型</th>
<th align="center">面接触型</th>
<th align="center">平面型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/%E7%82%B9%E6%8E%A5%E8%A7%A6%E5%9E%8B%E4%BA%8C%E6%9E%81%E7%AE%A1.png" title="图片"></td>
<td align="center"><img src="/images/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/%E9%9D%A2%E6%8E%A5%E8%A7%A6%E5%9E%8B%E4%BA%8C%E6%9E%81%E7%AE%A1.png" title="图片"></td>
<td align="center"><img src="/images/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/%E5%B9%B3%E9%9D%A2%E5%9E%8B%E4%BA%8C%E6%9E%81%E7%AE%A1.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>伏安特性</p>
<ul>
<li><img src="/images/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/%E4%BC%8F%E5%AE%89%E7%89%B9%E6%80%A7%E5%9B%BE.png" title="图片"></li>
<li><img src="/images/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/%E4%BC%8F%E5%AE%89%E7%89%B9%E6%80%A7%E8%A1%A8.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="1-4-二极管参数"><a href="#1-4-二极管参数" class="headerlink" title="1.4 二极管参数"></a>1.4 二极管参数</h2>]]></content>
  </entry>
  <entry>
    <title>深度学习及其应用-2</title>
    <url>/2021/08/05/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/</url>
    <content><![CDATA[<h1 id="1-机器学习概论"><a href="#1-机器学习概论" class="headerlink" title="1. 机器学习概论"></a>1. 机器学习概论</h1><span id="more"></span>
<h2 id="1-1-发展"><a href="#1-1-发展" class="headerlink" title="1.1 发展"></a>1.1 发展</h2><ul>
<li>四个阶段<ul>
<li>知识推理期</li>
<li>知识工程期</li>
<li>浅层学习</li>
<li>深度学习</li>
</ul>
</li>
<li>流派<ul>
<li>符号主义</li>
<li>贝叶斯</li>
<li>联结主义</li>
<li>进化主义</li>
<li>行为类推主义</li>
</ul>
</li>
<li>机器学习简史<br><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8F%B21.png" title="图片"><br><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%80%E5%8F%B22.png" title="图片"></li>
</ul>
<h2 id="1-2-机器学习过程"><a href="#1-2-机器学习过程" class="headerlink" title="1.2 机器学习过程"></a>1.2 机器学习过程</h2><ol>
<li>明确数据分析目标</li>
<li>数据收集</li>
<li>数据预处理</li>
<li>数据建模</li>
<li>效果 评估</li>
</ol>
<h2 id="1-3-机器学习常用算法"><a href="#1-3-机器学习常用算法" class="headerlink" title="1.3 机器学习常用算法"></a>1.3 机器学习常用算法</h2><p><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95.jpg" title="图片"></p>
<h1 id="2-分类算法"><a href="#2-分类算法" class="headerlink" title="2. 分类算法"></a>2. 分类算法</h1><h2 id="2-1-ID3算法"><a href="#2-1-ID3算法" class="headerlink" title="2.1 ID3算法"></a>2.1 ID3算法</h2><ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/ID3%E7%86%B5%E7%9A%84%E5%85%AC%E5%BC%8F.png" title="图片"><ul>
<li>m为分类个数</li>
<li>Ci为某个分类样本的个数</li>
<li>n为样本总数</li>
<li>例：有一个大小为10的布尔值样本集S𝑏，其中有6个真值、4个假值，那么该布尔型样本分类的熵为：<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/ID3%E7%86%B5%E7%9A%84%E4%BE%8B%E5%AD%90.png" title="图片"></li>
</ul>
</li>
</ul>
</li>
<li>信息增益(值越大，不确定程度越小)<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/ID3%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A.png" title="图片"></li>
<li>v为非特征的其他列的分类个数</li>
</ul>
</li>
</ul>
<h2 id="2-2-C4-5算法"><a href="#2-2-C4-5算法" class="headerlink" title="2.2 C4.5算法"></a>2.2 C4.5算法</h2><ul>
<li>当样本集中某列种类太多信息增益可能会变大，C4.5算法引入了信息增益率作为度量</li>
<li>信息增益率<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A%E7%8E%87.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="2-3-CART算法"><a href="#2-3-CART算法" class="headerlink" title="2.3 CART算法"></a>2.3 CART算法</h2><ul>
<li>Gini指标(值越小，不确定程度越小)<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/Gini%E6%8C%87%E6%A0%87.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="2-4-分类效果评价"><a href="#2-4-分类效果评价" class="headerlink" title="2.4 分类效果评价"></a>2.4 分类效果评价</h2><ul>
<li><p>分类情况</p>
<ul>
<li>真正类(TP)</li>
<li>假反类(FN)</li>
<li>假正类(FP)</li>
<li>真反类(TN)</li>
</ul>
</li>
<li><p>准确率</p>
<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E5%88%86%E7%B1%BB%E5%87%86%E7%A1%AE%E7%8E%87.png" title="图片"></li>
</ul>
</li>
<li><p>精确率</p>
<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E5%88%86%E7%B1%BB%E7%B2%BE%E7%A1%AE%E7%8E%87.png" title="图片"></li>
</ul>
</li>
<li><p>召回率</p>
<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E5%88%86%E7%B1%BB%E5%8F%AC%E5%9B%9E%E7%8E%87.png" title="图片"></li>
</ul>
</li>
<li><p>精确率和召回率的调和平均</p>
<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87%E7%9A%84%E8%B0%83%E5%92%8C%E5%B9%B3%E5%9D%87.png" title="图片"></li>
</ul>
</li>
<li><p>𝛼为调和参数值，当𝛼取值为1时，F值就是最常见的F1值</p>
<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87%E7%9A%84%E8%B0%83%E5%92%8C%E5%B9%B3%E5%9D%87F1.png" title="图片"></li>
</ul>
</li>
</ul>
<h2 id="2-5-集成学习"><a href="#2-5-集成学习" class="headerlink" title="2.5 集成学习"></a>2.5 集成学习</h2><ul>
<li>装袋法</li>
<li>提升法</li>
<li>随机森林</li>
<li>GBDT梯度提升树算法</li>
</ul>
<h2 id="2-6-支持向量机"><a href="#2-6-支持向量机" class="headerlink" title="2.6 支持向量机"></a>2.6 支持向量机</h2><h1 id="3-神经网络基础"><a href="#3-神经网络基础" class="headerlink" title="3. 神经网络基础"></a>3. 神经网络基础</h1><h2 id="3-1-神经网络简介"><a href="#3-1-神经网络简介" class="headerlink" title="3.1 神经网络简介"></a>3.1 神经网络简介</h2><ul>
<li>人工神经网络(Artificial Neural Netork,ANN)</li>
<li>反向传播(Back Propagation,BP)</li>
<li>感知器（结构最简单的前馈神经网络）<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E6%84%9F%E7%9F%A5%E5%99%A8%E5%85%AC%E5%BC%8F.png" title="图片"></li>
</ul>
</li>
<li>激活函数<ul>
<li>Sigmoid<ul>
<li>优点：输出范围有限(0,1)</li>
<li>缺点：两头过于平坦容易出现梯度消失</li>
</ul>
</li>
<li>双曲正切(tanh)<ul>
<li>类似Sigmoid范围变为(-1,1)</li>
</ul>
</li>
<li>ReLU</li>
<li>Leaky RuLU</li>
</ul>
</li>
<li>损失函数<ul>
<li>均方误差<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E5%9D%87%E6%96%B9%E5%B7%AE.png" title="图片"></li>
</ul>
</li>
<li>交叉熵<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E4%BA%A4%E5%8F%89%E7%86%B5.png" title="图片"></li>
<li>N：样本个数</li>
<li>y：真实的输出</li>
<li>y尖：样本输出</li>
</ul>
</li>
</ul>
</li>
<li>过拟合<ul>
<li>惩罚性成本函数（正则化）<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/%E6%83%A9%E7%BD%9A%E6%80%A7%E6%88%90%E6%9C%AC%E5%87%BD%E6%95%B0.png" title="图片"><ul>
<li>第二项网络权重的平方和（λ设置很大，w就变小）</li>
</ul>
</li>
</ul>
</li>
<li>漏失（Dropout）<ul>
<li>随机删除一个神经元子集</li>
</ul>
</li>
<li>今早终止</li>
<li>动量<h2 id="3-2-BP神经网络"><a href="#3-2-BP神经网络" class="headerlink" title="3.2 BP神经网络"></a>3.2 BP神经网络</h2></li>
</ul>
</li>
<li>损失函数<ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/BP%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png" title="图片"><h1 id="9-深度学习基础"><a href="#9-深度学习基础" class="headerlink" title="9. 深度学习基础"></a>9. 深度学习基础</h1><h2 id="9-1-卷积基本概念"><a href="#9-1-卷积基本概念" class="headerlink" title="9.1 卷积基本概念"></a>9.1 卷积基本概念</h2></li>
</ul>
</li>
<li>Convolutional Neural Networks(CNN)卷积神经网络</li>
</ul>
<h2 id="9-2-LeNet框架"><a href="#9-2-LeNet框架" class="headerlink" title="9.2 LeNet框架"></a>9.2 LeNet框架</h2><ul>
<li><img src="/images/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8-2/LeNet%E7%BB%93%E6%9E%84%E5%9B%BE.png" title="图片"></li>
</ul>
<h2 id="9-3-循环神经网络（RNN）"><a href="#9-3-循环神经网络（RNN）" class="headerlink" title="9.3 循环神经网络（RNN）"></a>9.3 循环神经网络（RNN）</h2>]]></content>
  </entry>
  <entry>
    <title>英语</title>
    <url>/2021/07/09/%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h1 id="1-简单句"><a href="#1-简单句" class="headerlink" title="1. 简单句"></a>1. 简单句</h1><span id="more"></span>
<h2 id="1-1核心构成"><a href="#1-1核心构成" class="headerlink" title="1.1核心构成"></a>1.1核心构成</h2><ul>
<li>主谓<ul>
<li>谓语为非及物动词</li>
</ul>
</li>
<li>主谓宾</li>
<li>主系表<ul>
<li>be -单独出现</li>
<li>get become turn go grow -变得</li>
<li>look sound smell taste feel -看/听···起来</li>
<li>seem appear/keep remain</li>
</ul>
</li>
<li>主谓双宾</li>
<li>主谓宾补</li>
</ul>
<h2 id="1-2-谓语变化"><a href="#1-2-谓语变化" class="headerlink" title="1.2 谓语变化"></a>1.2 谓语变化</h2><h3 id="①时态"><a href="#①时态" class="headerlink" title="①时态"></a>①时态</h3><table>
<thead>
<tr>
<th align="center">时态</th>
<th align="center">过去</th>
<th align="center">现在</th>
<th align="center">将来</th>
<th align="center">过去将来</th>
</tr>
</thead>
<tbody><tr>
<td align="center">一般</td>
<td align="center">did(过去式)</td>
<td align="center">do/does</td>
<td align="center">will do/ be going to do</td>
<td align="center">would do/ was/were going to do</td>
</tr>
<tr>
<td align="center">进行</td>
<td align="center">was/were doing</td>
<td align="center">be doing</td>
<td align="center">will be doing</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">完成</td>
<td align="center">had done</td>
<td align="center">have/has done</td>
<td align="center">will have done</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">完成进行</td>
<td align="center">had been doing</td>
<td align="center">have/has doing</td>
<td align="center">will have been doing</td>
<td align="center">×</td>
</tr>
</tbody></table>
<ul>
<li>单三：he、she、it、可数名词单数、不可数名词、不定代词（something、nothing、anything、somebody···）</li>
<li>一般现在时可表示永恒</li>
</ul>
<h3 id="②情态"><a href="#②情态" class="headerlink" title="②情态"></a>②情态</h3><table>
<thead>
<tr>
<th align="center">现在时</th>
<th align="center">过去时</th>
</tr>
</thead>
<tbody><tr>
<td align="center">must</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">can</td>
<td align="center">could</td>
</tr>
<tr>
<td align="center">will</td>
<td align="center">would</td>
</tr>
<tr>
<td align="center">shall</td>
<td align="center">should</td>
</tr>
<tr>
<td align="center">may</td>
<td align="center">might</td>
</tr>
</tbody></table>
<ul>
<li>右四个可以表示委婉</li>
<li>后加not变否定</li>
<li>情态动态表推测<ul>
<li>情态 + do        -推测现在</li>
<li>情态 + be doing  -推测现在正在进行</li>
<li>情态 + have done - 推测过去</li>
</ul>
</li>
</ul>
<h3 id="③语态"><a href="#③语态" class="headerlink" title="③语态"></a>③语态</h3><ul>
<li>be(被动的时间并考虑单复数) + done(被动的动作)</li>
</ul>
<h3 id="④否定"><a href="#④否定" class="headerlink" title="④否定"></a>④否定</h3><ol>
<li>实义动词变否定<ul>
<li>do/does/did + not + 动词原形</li>
</ul>
</li>
<li>助动词和情态动词变否定<ul>
<li>助动词和情态动词 + not (be动词、情态动词、完成时态中的have等)</li>
<li>遇到多个情态动词和助动词优先处理第一个</li>
</ul>
</li>
</ol>
<h2 id="1-3-主宾表变化"><a href="#1-3-主宾表变化" class="headerlink" title="1.3 主宾表变化"></a>1.3 主宾表变化</h2><ul>
<li>名词代词</li>
<li>doing</li>
<li>to do<ul>
<li>It is adj. (for sb.) to do sth</li>
<li>只能做动宾不能做介宾</li>
<li>It takes (sb.) some time to do sth</li>
</ul>
</li>
<li>并列多个</li>
</ul>
<h2 id="1-4-简单句扩展"><a href="#1-4-简单句扩展" class="headerlink" title="1.4 简单句扩展"></a>1.4 简单句扩展</h2><h3 id="①词性角度扩展"><a href="#①词性角度扩展" class="headerlink" title="①词性角度扩展"></a>①词性角度扩展</h3><ol>
<li>限定词<ul>
<li>冠词：a an the</li>
<li>数词</li>
<li>名词所有格</li>
<li>名词</li>
</ul>
</li>
<li>形容词、副词<ul>
<li>形容词跟在名词前后做定语或系动词后做表语，其他副词来修饰</li>
<li>比较级别<ul>
<li>原级：as + 形容词或副词原型 + as + 比较对象</li>
<li>比较级：形容词副词比较级 (+ than 比较对象)</li>
<li>最高级：形容词副词最高级 (+ 介词短语表示范围)</li>
</ul>
</li>
</ul>
</li>
<li>介词短语<ul>
<li>可接名词、代词、doing</li>
<li>表时间 <img src="/images/%E8%8B%B1%E8%AF%AD/%E8%A1%A8%E7%A4%BA%E6%97%B6%E9%97%B4%E7%9A%84%E4%BB%8B%E8%AF%8D.png" title="图片"></li>
<li>表地点 <img src="/images/%E8%8B%B1%E8%AF%AD/%E8%A1%A8%E7%A4%BA%E5%9C%B0%E7%82%B9%E7%9A%84%E4%BB%8B%E8%AF%8D.png" title="图片"></li>
<li>其他 <img src="/images/%E8%8B%B1%E8%AF%AD/%E5%85%B6%E4%BB%96%E7%9A%84%E4%BB%8B%E8%AF%8D.png" title="图片"><h3 id="②成分角度扩展"><a href="#②成分角度扩展" class="headerlink" title="②成分角度扩展"></a>②成分角度扩展</h3></li>
</ul>
</li>
<li>非谓语动词做定语、状语<ul>
<li>doing 主动</li>
<li>done 被动</li>
<li>to do 目的</li>
</ul>
</li>
<li>同位语、插入语</li>
</ol>
<h1 id="2-长难句"><a href="#2-长难句" class="headerlink" title="2.长难句"></a>2.长难句</h1><h2 id="2-1-并列句"><a href="#2-1-并列句" class="headerlink" title="2.1 并列句"></a>2.1 并列句</h2><ol>
<li>表顺接 <img src="/images/%E8%8B%B1%E8%AF%AD/%E8%A1%A8%E9%A1%BA%E6%8E%A5%E7%9A%84%E5%B9%B6%E5%88%97%E8%BF%9E%E8%AF%8D.png" title="图片"></li>
<li>表转折 <img src="/images/%E8%8B%B1%E8%AF%AD/%E8%A1%A8%E8%BD%AC%E6%8A%98%E7%9A%84%E5%B9%B6%E5%88%97%E8%BF%9E%E8%AF%8D.png" title="图片"></li>
<li>表选择 <img src="/images/%E8%8B%B1%E8%AF%AD/%E8%A1%A8%E9%80%89%E6%8B%A9%E7%9A%84%E5%B9%B6%E5%88%97%E8%BF%9E%E8%AF%8D.png" title="图片"></li>
<li>表因果 <img src="/images/%E8%8B%B1%E8%AF%AD/%E8%A1%A8%E5%9B%A0%E6%9E%9C%E7%9A%84%E5%B9%B6%E5%88%97%E8%BF%9E%E8%AF%8D.png" title="图片"><h2 id="2-2-名词性从句"><a href="#2-2-名词性从句" class="headerlink" title="2.2 名词性从句"></a>2.2 名词性从句</h2><h3 id="①-宾语从句"><a href="#①-宾语从句" class="headerlink" title="① 宾语从句"></a>① 宾语从句</h3></li>
</ol>
<ul>
<li>写法<ul>
<li>陈述句： Dr.Worm acknowledges + These figures are conservative <ul>
<li>Dr.Worm acknowledges (that) These figures are conservative </li>
</ul>
</li>
<li>特殊疑问句：We suddenly can’t remember + Where did we put the keys just a moment age（主语提前）<ul>
<li>We suddenly can’t remember where we put the keys just a moment age</li>
</ul>
</li>
<li>一般疑问句变宾语从句<ul>
<li>I don’t know + Are other clients going to abandon me, too?（连接词加whether）</li>
<li>I don’t know whether other clients are going to abandon me, too.</li>
</ul>
</li>
</ul>
</li>
<li>只有宾语从句的that可以省略<h3 id="②-表语从句"><a href="#②-表语从句" class="headerlink" title="② 表语从句"></a>② 表语从句</h3></li>
<li>同宾语从句<h3 id="③-主语从句"><a href="#③-主语从句" class="headerlink" title="③ 主语从句"></a>③ 主语从句</h3></li>
<li>同宾语从句</li>
<li>that不做成份不可省略</li>
<li>只能用whether不能用if</li>
<li>It is done + 主语从句(表达人们对一件事的观点看法)</li>
<li>It is adj./n  + 主语从句(表达对一件事的评价)<h3 id="④-同位语从句"><a href="#④-同位语从句" class="headerlink" title="④ 同位语从句"></a>④ 同位语从句</h3></li>
<li>抽象名词后</li>
</ul>
<h2 id="2-3-定语从句"><a href="#2-3-定语从句" class="headerlink" title="2.3 定语从句"></a>2.3 定语从句</h2><p><img src="/images/%E8%8B%B1%E8%AF%AD/%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5%E8%BF%9E%E6%8E%A5%E8%AF%8D.png" title="图片"></p>
<ul>
<li><p>关系词在从句中做宾语时可以省略</p>
</li>
<li><p>关系词都做成份</p>
</li>
<li><p>范围明确 - 非限定性定语从句</p>
<ul>
<li>关系词不能用that</li>
<li>关系词不可省略</li>
<li>人做宾语必须用whom</li>
</ul>
</li>
<li><p>限定性定语从句和同位语从句的区别<br><img src="/images/%E8%8B%B1%E8%AF%AD/%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5%E5%92%8C%E5%90%8C%E4%BD%8D%E8%AF%AD%E4%BB%8E%E5%8F%A5%E5%8C%BA%E5%88%AB.png" title="图片"></p>
</li>
</ul>
<h2 id="2-4-状语从句"><a href="#2-4-状语从句" class="headerlink" title="2.4 状语从句"></a>2.4 状语从句</h2><ul>
<li>写法<br><img src="/images/%E8%8B%B1%E8%AF%AD/%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5%E5%86%99%E6%B3%95.png" title="图片"></li>
</ul>
<ol>
<li><p>时间状语</p>
<ul>
<li>when / while /as</li>
<li>before / after</li>
<li>since / until</li>
<li>as soon as</li>
<li>by the time</li>
</ul>
</li>
<li><p>地点状语</p>
<ul>
<li>where</li>
</ul>
</li>
<li><p>原因状语</p>
<ul>
<li>because</li>
<li>since</li>
<li>as</li>
</ul>
</li>
<li><p>结果状语</p>
<ul>
<li>so…(形容词/副词) that…</li>
<li>such…(名词/名词词组) that…</li>
<li>so that   </li>
</ul>
</li>
<li><p>目的状语</p>
<ul>
<li>so that（后边出现情态动词）</li>
<li>in order that</li>
</ul>
</li>
<li><p>条件状语</p>
<ul>
<li>if</li>
<li>once</li>
<li>as long as / so long as</li>
</ul>
</li>
<li><p>让步状语</p>
<ul>
<li>althouth / though</li>
<li>even if / even though</li>
</ul>
</li>
<li><p>比较状语</p>
<ul>
<li>than</li>
<li>as</li>
</ul>
</li>
<li><p>方式状语</p>
<ul>
<li>as</li>
<li>as if</li>
</ul>
</li>
</ol>
<h2 id="2-5-虚拟"><a href="#2-5-虚拟" class="headerlink" title="2.5 虚拟"></a>2.5 虚拟</h2><ul>
<li>if虚拟条件句<ul>
<li>从句往前推，主句四加一</li>
<li><img src="/images/%E8%8B%B1%E8%AF%AD/%E5%9B%9B%E5%8A%A0%E4%B8%80.png" title="图片"></li>
</ul>
</li>
<li>名词性从句的虚拟<ul>
<li>主句表示建议命令要求，从句要虚拟</li>
<li>从句 should + 动词原形(should可以省略)</li>
</ul>
</li>
</ul>
<h2 id="2-6-倒装"><a href="#2-6-倒装" class="headerlink" title="2.6 倒装"></a>2.6 倒装</h2><ul>
<li>全部倒装</li>
<li>部分倒装<ul>
<li>改为一般疑问句</li>
<li>否定副词或词组位于句首</li>
<li>only位于句首</li>
<li>虚拟条件句if省略</li>
</ul>
</li>
</ul>
<h2 id="2-7-强调"><a href="#2-7-强调" class="headerlink" title="2.7 强调"></a>2.7 强调</h2><ul>
<li>It is … that</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>计算机硬件系统设计</title>
    <url>/2021/08/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>c_c++</title>
    <url>/2021/05/25/fpga/c_c++/</url>
    <content><![CDATA[<h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><h3 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h3><span id="more"></span>  
<h4 id="①-基本数据类型"><a href="#①-基本数据类型" class="headerlink" title="① 基本数据类型"></a>① 基本数据类型</h4><ul>
<li>整数</li>
<li>实数</li>
<li>字符</li>
<li>空值</li>
<li><strong>逻辑</strong><blockquote>
<p>char、wchar_t、int、float、double、bool、void（sined、unsigned、long、short都可以修饰int，前两个修饰char，long修饰double）</p>
</blockquote>
</li>
</ul>
<h4 id="②-构造数据类型"><a href="#②-构造数据类型" class="headerlink" title="② 构造数据类型"></a>② 构造数据类型</h4><ul>
<li>枚举</li>
<li>数组</li>
<li>指针</li>
<li>结构与联合</li>
<li><strong>引用</strong></li>
</ul>
<h4 id="③抽象数据类型"><a href="#③抽象数据类型" class="headerlink" title="③抽象数据类型"></a>③抽象数据类型</h4><ul>
<li><strong>类</strong><h3 id="1-2-输入输出"><a href="#1-2-输入输出" class="headerlink" title="1.2 输入输出"></a>1.2 输入输出</h3></li>
</ul>
<p><strong>cout格式控制</strong></p>
<table>
<thead>
<tr>
<th align="left">控制符</th>
<th align="center">有效期</th>
<th align="right">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dec</td>
<td align="center">一直有效</td>
<td align="right">按10进制输出</td>
</tr>
<tr>
<td align="left">oct</td>
<td align="center">一直有效</td>
<td align="right">按8进制输出</td>
</tr>
<tr>
<td align="left">hex</td>
<td align="center">一直有效</td>
<td align="right">按16进制输出</td>
</tr>
<tr>
<td align="left">fixed</td>
<td align="center">一直有效</td>
<td align="right">浮点数按照定点方式输出</td>
</tr>
<tr>
<td align="left">showpoint</td>
<td align="center">一直有效</td>
<td align="right">浮点数输出时显示小数点</td>
</tr>
<tr>
<td align="left">setw(…)</td>
<td align="center">一次</td>
<td align="right">设定数值输出的位数</td>
</tr>
<tr>
<td align="left">setprecision(…)</td>
<td align="center">一直有效</td>
<td align="right">设定浮点数小数点后的位数</td>
</tr>
<tr>
<td align="left">setfill(…)</td>
<td align="center">一直有效</td>
<td align="right">设定数值前填充的字符</td>
</tr>
</tbody></table>
<h3 id="1-3-控制结构"><a href="#1-3-控制结构" class="headerlink" title="1.3 控制结构"></a>1.3 控制结构</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if</span></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch</span></span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>()&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式:语句;brea;</span><br><span class="line">    <span class="keyword">default</span>: 语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//while for do-while</span></span><br></pre></td></tr></table></figure>
<h3 id="1-4-自定义数据类型"><a href="#1-4-自定义数据类型" class="headerlink" title="1.4 自定义数据类型"></a>1.4 自定义数据类型</h3><h4 id="①-typedef"><a href="#①-typedef" class="headerlink" title="① typedef"></a>① typedef</h4><blockquote>
<p>typedef 已知类型名 新类型名</p>
</blockquote>
<h4 id="②-枚举类型enum"><a href="#②-枚举类型enum" class="headerlink" title="② 枚举类型enum"></a>② 枚举类型enum</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span> <span class="title">days</span>&#123;</span>Mon,Tue,Web,Thur,Fri,Sat,Sun&#125;;</span><br><span class="line">	days today = Mon;</span><br><span class="line">	cout&lt;&lt;today&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="③结构体struct"><a href="#③结构体struct" class="headerlink" title="③结构体struct"></a>③结构体struct</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> one;</span><br><span class="line">    <span class="keyword">int</span> two;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="④联合体union"><a href="#④联合体union" class="headerlink" title="④联合体union"></a>④联合体union</h4><h3 id="1-5-内存管理"><a href="#1-5-内存管理" class="headerlink" title="1.5 内存管理"></a>1.5 内存管理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">type *p;</span><br><span class="line">p = <span class="keyword">new</span> <span class="built_in">type</span>(初值);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = <span class="keyword">new</span> type[num];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-内联函数"><a href="#1-6-内联函数" class="headerlink" title="1.6 内联函数"></a>1.6 内联函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//类似宏定义</span><br><span class="line">inline int abs(int value)&#123;</span><br><span class="line">    return (value &lt; 0 ? -value : value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h2><h3 id="2-1-类的定义"><a href="#2-1-类的定义" class="headerlink" title="2.1 类的定义"></a>2.1 类的定义</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> hour;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">point</span>()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//析构函数</span></span><br><span class="line">        ~<span class="built_in">point</span>()&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">point</span>(point &amp;obj)</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SetTime</span><span class="params">(<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">            hour = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ShowTime</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">constfun</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clock::ShowTime</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Clock test;</span><br><span class="line">Clock *test1 = <span class="keyword">new</span> <span class="built_in">Clock</span>();</span><br></pre></td></tr></table></figure>

<h3 id="1-2-类的组合"><a href="#1-2-类的组合" class="headerlink" title="1.2 类的组合"></a>1.2 类的组合</h3><ul>
<li>内嵌对象的初始化必须写在初始化列表</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    Point center;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Circle</span>(<span class="keyword">float</span> x,<span class="keyword">float</span> y):<span class="built_in">center</span>(x,y)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-数据共享和保护"><a href="#2-数据共享和保护" class="headerlink" title="2. 数据共享和保护"></a>2. 数据共享和保护</h2><h3 id="2-1-对象数组"><a href="#2-1-对象数组" class="headerlink" title="2.1 对象数组"></a>2.1 对象数组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Point</span>()&#123;&#125;;</span><br><span class="line">        <span class="built_in">Point</span>(<span class="keyword">int</span> x)&#123;&#125;;</span><br><span class="line">        <span class="built_in">Point</span>(<span class="keyword">int</span> x,<span class="keyword">int</span> y)&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Point array[<span class="number">3</span>]=&#123;<span class="built_in">Point</span>(<span class="number">3</span>,<span class="number">4</span>),<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">//初始化了前两个</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-常对象"><a href="#2-2-常对象" class="headerlink" title="2.2 常对象"></a>2.2 常对象</h3><ul>
<li>常对象只能调用常方法<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> Clock c1;</span><br><span class="line">Clock <span class="keyword">const</span> c2;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-友元"><a href="#2-3-友元" class="headerlink" title="2.3 友元"></a>2.3 友元</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">float</span> <span class="title">Distance</span><span class="params">(Point a,Point b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//友元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span>&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&#123;</span></span><br><span class="line">    <span class="comment">//Y的类对象可以直接访问x的成员</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Y</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将成员函数说明为另一个类的友元类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&#123;</span></span><br><span class="line">    <span class="comment">//此函数为Y的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Y::SetX</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-静态成员"><a href="#2-4-静态成员" class="headerlink" title="2.4 静态成员"></a>2.4 静态成员</h3><ul>
<li>静态成员在类的内部进行声明，类的外部进行初始化<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> value;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x::value=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-继承与派生"><a href="#3-继承与派生" class="headerlink" title="3. 继承与派生"></a>3. 继承与派生</h2><h3 id="3-1-单继承"><a href="#3-1-单继承" class="headerlink" title="3.1 单继承"></a>3.1 单继承</h3><h4 id="①继承方式"><a href="#①继承方式" class="headerlink" title="①继承方式"></a>①继承方式</h4><table>
<thead>
<tr>
<th align="left">基类</th>
<th align="center">公有成员</th>
<th align="center">私有成员</th>
<th align="center">保护成员</th>
</tr>
</thead>
<tbody><tr>
<td align="left">公有派生类</td>
<td align="center">公有成员</td>
<td align="center">不可访问成员</td>
<td align="center">保护成员</td>
</tr>
<tr>
<td align="left">私有派生类</td>
<td align="center">私有成员</td>
<td align="center">不可访问成员</td>
<td align="center">私有成员</td>
</tr>
<tr>
<td align="left">保护派生类</td>
<td align="center">保护成员</td>
<td align="center">不可访问成员</td>
<td align="center">保护成员</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名:</span>&lt;继承方式&gt;基类名&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="②同名成员的访问方式"><a href="#②同名成员的访问方式" class="headerlink" title="②同名成员的访问方式"></a>②同名成员的访问方式</h4><ul>
<li>类内=基类名:变量名</li>
<li>类外=对象.基类名:变量名</li>
</ul>
<h4 id="③赋值兼容规则"><a href="#③赋值兼容规则" class="headerlink" title="③赋值兼容规则"></a>③赋值兼容规则</h4><ul>
<li>派生类对象可以直接赋值给基类对象</li>
<li>基类对象的引用可以引用派生类对象</li>
<li>基类对象的指针可以指向派生类对象</li>
</ul>
<h4 id="④单继承下的构造和析构函数"><a href="#④单继承下的构造和析构函数" class="headerlink" title="④单继承下的构造和析构函数"></a>④单继承下的构造和析构函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">派生类(参数列表):基类(参数列表)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-多继承"><a href="#3-2-多继承" class="headerlink" title="3.2 多继承"></a>3.2 多继承</h3><ul>
<li>虚基类的构造函数在非虚基类之前调用（优先调用虚基类）</li>
<li>若一个层次中包含多个虚基类，那么虚基类构造函数按他们说明的次序调用（虚基类优先调用先声明）</li>
<li>若虚基类由非虚基类派生，则先调用基类构造函数，再调用派生类构造函数（）<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名:</span>&lt;继承方式<span class="number">1</span>&gt;基类名<span class="number">1</span>,&lt;继承方式<span class="number">2</span>&gt;基类名<span class="number">2</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接基类产生二义性</span></span><br><span class="line">对象名.基类名::方法名</span><br><span class="line"><span class="comment">//间接基类产生二义性通过使用virtual虚基类解决</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b1</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="keyword">int</span> b1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b2</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="keyword">int</span> b2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span>:</span><span class="keyword">public</span> b1,<span class="keyword">public</span> b2&#123;</span><br><span class="line">    <span class="keyword">int</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c中的a变量来自b1</span></span><br></pre></td></tr></table></figure>
<h2 id="4-多态"><a href="#4-多态" class="headerlink" title="4. 多态"></a>4. 多态</h2><h3 id="4-1-运算符重载"><a href="#4-1-运算符重载" class="headerlink" title="4.1 运算符重载"></a>4.1 运算符重载</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//使用友元函数更安全 friend</span></span><br><span class="line">        test <span class="keyword">operator</span>+(test b)&#123;</span><br><span class="line">            test re;</span><br><span class="line">            re.a=a+b.a;</span><br><span class="line">            <span class="keyword">return</span> re;</span><br><span class="line">        &#125;</span><br><span class="line">        test <span class="keyword">operator</span>++()&#123;</span><br><span class="line">            a++;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后++</span></span><br><span class="line">        test <span class="keyword">operator</span>++(<span class="keyword">int</span>)&#123;</span><br><span class="line">            test tmp=*<span class="keyword">this</span>;</span><br><span class="line">            a--;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, test&amp; obj) &#123;</span><br><span class="line">    out &lt;&lt; obj.a;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-2-虚函数"><a href="#4-2-虚函数" class="headerlink" title="4.2 虚函数"></a>4.2 虚函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> coun = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">resu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n + coun;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> :</span> <span class="keyword">public</span> a &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> coun = <span class="number">4</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">resu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n + coun;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">total</span><span class="params">(a&amp; obj, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="built_in">resu</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    a test1;</span><br><span class="line">    b test2;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">total</span>(test1,<span class="number">2</span>) &lt;&lt; endl &lt;&lt; <span class="built_in">total</span>(test2,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>赋值兼容规则:公有派生下，派生类对象可以作为基类对象来使用</p>
</blockquote>
<h3 id="4-3-纯虚函数"><a href="#4-3-纯虚函数" class="headerlink" title="4.3 纯虚函数"></a>4.3 纯虚函数</h3><ul>
<li>存在纯虚函数，则派生类必须实现此函数</li>
<li>拥有纯虚函数的类被称为抽象类，不能被实例化，只能做基类</li>
<li>若派生类没有实现全部虚函数，则此派生类为抽象类</li>
<li>当抽象类的所有成员函数都是虚函数，则此类为接口类</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shape</span>&#123;</span></span><br><span class="line">    <span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">perimeter</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-命名空间与异常处理"><a href="#5-命名空间与异常处理" class="headerlink" title="5. 命名空间与异常处理"></a>5. 命名空间与异常处理</h2><h3 id="5-1-模板"><a href="#5-1-模板" class="headerlink" title="5.1 模板"></a>5.1 模板</h3><ul>
<li>函数最佳匹配原则，完全匹配时，普通函数由于模板函数及模板函数的实例化版本<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模板函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> 形参1,<span class="keyword">class</span> 形参2&gt;</span> </span><br><span class="line">返回类型 函数名(参数列)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T x,T y)</span></span>&#123;<span class="keyword">return</span> x &gt; y ? x : y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板类</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> 形参1,<span class="keyword">class</span> 形参2&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//类模板外定义成员函数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> 形参1,<span class="keyword">class</span> 形参2&gt;</span> </span><br><span class="line">返回类型 类名&lt;模板参数名&gt;::函数名(参数列)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> &#123;</span></span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		T one;</span><br><span class="line">		<span class="function">T <span class="title">max</span><span class="params">(T two)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T a&lt;T&gt;::<span class="built_in">max</span>(T two) &#123;</span><br><span class="line">	<span class="keyword">return</span> one &gt; two ? one : two;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	a&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">	test.one = <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; test.<span class="built_in">max</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2-异常处理"><a href="#5-2-异常处理" class="headerlink" title="5.2 异常处理"></a>5.2 异常处理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;提示信息&quot;</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="built_in"><span class="keyword">catch</span></span>(runtime_error err)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-标准库模板"><a href="#6-标准库模板" class="headerlink" title="6. 标准库模板"></a>6. 标准库模板</h2><h3 id="6-1-容器"><a href="#6-1-容器" class="headerlink" title="6.1 容器"></a>6.1 容器</h3><h4 id="①顺序容器"><a href="#①顺序容器" class="headerlink" title="①顺序容器"></a>①顺序容器</h4><ul>
<li>vector、list、deque<h4 id="②关联容器"><a href="#②关联容器" class="headerlink" title="②关联容器"></a>②关联容器</h4></li>
<li>set、multiset、map、multimap<h4 id="③容器适配器"><a href="#③容器适配器" class="headerlink" title="③容器适配器"></a>③容器适配器</h4></li>
<li>stack、queue、priority_queue</li>
</ul>
<h3 id="6-2-迭代器"><a href="#6-2-迭代器" class="headerlink" title="6.2 迭代器"></a>6.2 迭代器</h3><h3 id="6-3-算法"><a href="#6-3-算法" class="headerlink" title="6.3 算法"></a>6.3 算法</h3>]]></content>
  </entry>
  <entry>
    <title>fpga</title>
    <url>/2021/05/29/fpga/fpga/</url>
    <content><![CDATA[<p>c</p>
]]></content>
  </entry>
  <entry>
    <title>verilog</title>
    <url>/2021/05/25/fpga/verilog/</url>
    <content><![CDATA[<h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><ol>
<li>编译和综合时空白符被忽略</li>
<li>注释//和/**/</li>
<li>标识符由字母、数字、$和—组成，以字母或下划线开头</li>
<li>转义\</li>
<li>关键字都是小写</li>
<li>数值<ul>
<li>1</li>
<li>0</li>
<li>x</li>
<li>z</li>
</ul>
</li>
</ol>
<h3 id="1-1-常量"><a href="#1-1-常量" class="headerlink" title="1.1 常量"></a>1.1 常量</h3><span id="more"></span>
<ul>
<li>十进制两种表示方式：十进制数形式和带基数形式</li>
</ul>
<table>
<thead>
<tr>
<th align="center">整数型</th>
<th align="center">实数型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/verilog/verilog%E5%9F%BA%E6%95%B0%E5%BD%A2%E5%BC%8F.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/verilog/verilog%E5%AE%9E%E6%95%B0%E5%9E%8B1.png" alt="my-logo.png" title="my-logo"><img src="/images/verilog/verilog%E5%AE%9E%E6%95%B0%E5%9E%8B%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0.png" alt="my-logo.png" title="my-logo"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">字符串型</th>
<th align="center">符号常量</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/verilog/verilog%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9E%8B.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/verilog/verilog%E7%AC%A6%E5%8F%B7%E5%B8%B8%E9%87%8F.png" alt="my-logo.png" title="my-logo"></td>
</tr>
</tbody></table>
<h3 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h3><ul>
<li>无符号数：线网、reg、无s的基数格式整数</li>
<li>有符号数：integer、有符号的reg、有符号的线网、十进制整数、有s的基数格式整数</li>
</ul>
<h4 id="①线网类型"><a href="#①线网类型" class="headerlink" title="①线网类型"></a>①线网类型</h4><ul>
<li>wire：型数据常用来表示用以assign关键字指定的组合逻辑信号<br><img src="/images/verilog/verilog%E7%BA%BF%E7%BD%91%E7%B1%BB%E5%9E%8B.png" alt="my-logo.png" title="my-logo"></li>
</ul>
<h4 id="②寄存器型"><a href="#②寄存器型" class="headerlink" title="②寄存器型"></a>②寄存器型</h4><p><img src="/images/verilog/verilog%E5%AF%84%E5%AD%98%E5%99%A8%E7%B1%BB%E5%9E%8B.png" alt="my-logo.png" title="my-logo"></p>
<ul>
<li>rege：定义寄存器数据类型</li>
<li>memory：对rege型变量建立数组</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> a          <span class="comment">//定义了一个1位的wire型数据</span></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">7</span>:<span class="number">0</span>] b;    <span class="comment">//定义了一个8位的wire型数据</span></span><br><span class="line"><span class="keyword">wire</span>[<span class="number">4</span>:<span class="number">1</span>] c,d;  <span class="comment">//定义了二个4位的wire型数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> rega             <span class="comment">//定义了一个1位的reg型数据</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">3</span>:<span class="number">0</span>] regb;       <span class="comment">//定义了一个4位的reg型数据</span></span><br><span class="line"><span class="keyword">reg</span>[<span class="number">4</span>:<span class="number">1</span>] regc,regd;  <span class="comment">//定义了二个4位的reg型数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> mema[n-<span class="number">1</span>:<span class="number">0</span>];     <span class="comment">//定义了由n个一位寄存器构成的存储器组</span></span><br></pre></td></tr></table></figure>

<h2 id="2-逻辑功能描述"><a href="#2-逻辑功能描述" class="headerlink" title="2 逻辑功能描述"></a>2 逻辑功能描述</h2><h3 id="2-1-结构级建模"><a href="#2-1-结构级建模" class="headerlink" title="2.1 结构级建模"></a>2.1 结构级建模</h3><h4 id="①多输入门"><a href="#①多输入门" class="headerlink" title="①多输入门"></a>①多输入门</h4><ul>
<li>只有单个输出，1个或多个输入<br><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E7%BA%A7%E5%BB%BA%E6%A8%A1%E5%8E%9F%E8%AF%AD.png" alt="my-logo.png" title="my-logo"></li>
</ul>
<h4 id="②多输出门"><a href="#②多输出门" class="headerlink" title="②多输出门"></a>②多输出门</h4><ul>
<li>允许有多个输出，但只有一个输入（buf输入与输出相同，not相反）<br><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E7%BA%A7%E5%BB%BA%E6%A8%A1%E5%A4%9A%E8%BE%93%E5%87%BA%E9%97%A8.png" alt="my-logo.png" title="my-logo"></li>
</ul>
<h4 id="③三态门"><a href="#③三态门" class="headerlink" title="③三态门"></a>③三态门</h4><ul>
<li>有一个输出，一个数据输入和一个控制输入</li>
<li>如果输入控制无效，三态门输出高阻态z<table>
<thead>
<tr>
<th align="center">元件模型</th>
<th align="center">实例引用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E7%BA%A7%E5%BB%BA%E6%A8%A1%E4%B8%89%E6%80%81%E9%97%A8.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E7%BA%A7%E5%BB%BA%E6%A8%A1%E4%B8%89%E6%80%81%E9%97%A8%E5%AE%9E%E4%BE%8B.png" alt="my-logo.png" title="my-logo"></td>
</tr>
</tbody></table>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">bufif1</th>
<th align="center">bufif1</th>
<th align="center">notif1</th>
<th align="center">notif0</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/verilog/bufif1%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/verilog/bufif0%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/verilog/notif1%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/verilog/notif0%E7%9C%9F%E5%80%BC%E8%A1%A8.png" alt="my-logo.png" title="my-logo"></td>
</tr>
</tbody></table>
<h4 id="④案例1二选一数据选择器"><a href="#④案例1二选一数据选择器" class="headerlink" title="④案例1二选一数据选择器"></a>④案例1二选一数据选择器</h4><div class="tabs" id="jiegoujianmo1"><ul class="nav-tabs"><li class="tab active"><a href="#jiegoujianmo1-1">代码</a></li><li class="tab"><a href="#jiegoujianmo1-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jiegoujianmo1-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="number">_2</span>to1muxtri(a,b,sel,out)</span><br><span class="line">    <span class="keyword">input</span> a,b,sel;</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line">    <span class="keyword">tri</span> out;</span><br><span class="line">    <span class="keyword">bufif1</span>(out,b,sel);</span><br><span class="line">    <span class="keyword">bufif0</span>(out,a,sel);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jiegoujianmo1-2"><p><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E5%BB%BA%E6%A8%A12%E9%80%891.png" alt="my-logo.png" title="my-logo"></p></div></div></div>

<h4 id="④案例2一位全加器"><a href="#④案例2一位全加器" class="headerlink" title="④案例2一位全加器"></a>④案例2一位全加器</h4><div class="tabs" id="jiegoujianmo2"><ul class="nav-tabs"><li class="tab active"><a href="#jiegoujianmo2-1">代码</a></li><li class="tab"><a href="#jiegoujianmo2-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="jiegoujianmo2-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> addbit(a,b,ci,sum,co);</span><br><span class="line">    <span class="keyword">input</span> a,b,ci;</span><br><span class="line">    <span class="keyword">output</span> sum,co;</span><br><span class="line">    <span class="keyword">wire</span> a,b,ci,sum,co,n1,n2,n3;</span><br><span class="line">    <span class="keyword">xor</span> u0(n1,a,b)</span><br><span class="line">        u1(sum,n1,ci);</span><br><span class="line">    <span class="keyword">and</span> u2(n2,a,b)</span><br><span class="line">        u3(n3,n1,ci);</span><br><span class="line">    <span class="keyword">or</span>    (co,n2,n3);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="jiegoujianmo2-2"><p><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E5%BB%BA%E6%A8%A11%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8.png" alt="my-logo.png" title="my-logo"></p></div></div></div>



<h3 id="2-2-数据流级建模"><a href="#2-2-数据流级建模" class="headerlink" title="2.2 数据流级建模"></a>2.2 数据流级建模</h3><h4 id="①运算符分类"><a href="#①运算符分类" class="headerlink" title="①运算符分类"></a>①运算符分类</h4><table>
<thead>
<tr>
<th align="left">运算符分类</th>
<th align="center">所含运算符</th>
<th align="center">注意</th>
</tr>
</thead>
<tbody><tr>
<td align="left">算数运算符</td>
<td align="center">+，-，*，/，%，**</td>
<td align="center">算数运算某一位为x或z则整个表达式结果为x</td>
</tr>
<tr>
<td align="left">关系运算符</td>
<td align="center">&lt;，&gt;，&lt;=，&gt;=</td>
<td align="center">操作数中有一位x或z，则结果为x，若有一个操作数为无符号则其余当作无符号</td>
</tr>
<tr>
<td align="left">相等运算符</td>
<td align="center">==，!=，===，!==</td>
<td align="center">逻辑等若存在x或z则结果为x，全等只要对应位全一致则结果为1</td>
</tr>
<tr>
<td align="left">逻辑运算符</td>
<td align="center">&amp;&amp;，||，！</td>
<td align="center">若操作数有一位为x或z则结果为x</td>
</tr>
<tr>
<td align="left">位运算符</td>
<td align="center">~，&amp;，|，~^，^</td>
<td align="center">无</td>
</tr>
<tr>
<td align="left">缩位运算符</td>
<td align="center">&amp;，~&amp;，|，~|，^，^~</td>
<td align="center">从右到左一次对所有位进行运算，若某位为x，则结果为1位x</td>
</tr>
<tr>
<td align="left">移位运算符</td>
<td align="center">&lt;&lt;，&gt;&gt;，&lt;&lt;&lt;，&gt;&gt;&gt;</td>
<td align="center">若右侧的操作数为x或z则结果为x</td>
</tr>
<tr>
<td align="left">条件运算符</td>
<td align="center">?:</td>
<td align="center">若表达式为x或z则对两个结果进行逐位比较，若不等该位取x</td>
</tr>
<tr>
<td align="left">拼接和复制运算符</td>
<td align="center">{}，</td>
<td align="center">例子{n{A}}将A重复n次</td>
</tr>
</tbody></table>
<h4 id="②运算符优先级"><a href="#②运算符优先级" class="headerlink" title="②运算符优先级"></a>②运算符优先级</h4><p><img src="/images/verilog/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.png" alt="my-logo.png" title="my-logo"></p>
<h4 id="③案例1二选一数据选择器"><a href="#③案例1二选一数据选择器" class="headerlink" title="③案例1二选一数据选择器"></a>③案例1二选一数据选择器</h4><div class="tabs" id="数据流jianmo1"><ul class="nav-tabs"><li class="tab active"><a href="#数据流jianmo1-1">代码</a></li><li class="tab"><a href="#数据流jianmo1-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="数据流jianmo1-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2x1_df(D0,D1,S,Y);</span><br><span class="line">    <span class="keyword">input</span> D0,D1,S;</span><br><span class="line">    <span class="keyword">output</span> Y;</span><br><span class="line">    <span class="keyword">assign</span> Y = S ? D1:D0;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="数据流jianmo1-2"><p><img src="/images/verilog/verilog%E7%BB%93%E6%9E%84%E5%BB%BA%E6%A8%A12%E9%80%891.png" alt="my-logo.png" title="my-logo"></p></div></div></div>

<h4 id="④案例2二线-四线译码器"><a href="#④案例2二线-四线译码器" class="headerlink" title="④案例2二线-四线译码器"></a>④案例2二线-四线译码器</h4><div class="tabs" id="数据流jianmo1"><ul class="nav-tabs"><li class="tab active"><a href="#数据流jianmo1-1">代码</a></li><li class="tab"><a href="#数据流jianmo1-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="数据流jianmo1-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> decoder_df(A1,A0,E,Y);</span><br><span class="line">    <span class="keyword">input</span> A1,A0,E;</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] Y;</span><br><span class="line">    <span class="keyword">assign</span> Y[<span class="number">0</span>] = ~(~A1 &amp; ~A0 &amp; ~E);</span><br><span class="line">    <span class="keyword">assign</span> Y[<span class="number">1</span>] = ~(~A1 &amp; A0 &amp; ~E);</span><br><span class="line">    <span class="keyword">assign</span> Y[<span class="number">2</span>] = ~(A1 &amp; ~A0 &amp; ~E);</span><br><span class="line">    <span class="keyword">assign</span> Y[<span class="number">3</span>] = ~(A1 &amp; A0 &amp; ~E);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="数据流jianmo1-2"><p><img src="/images/verilog/2%E7%BA%BF-4%E7%BA%BF%E8%AF%91%E7%A0%81%E5%99%A8.png" alt="my-logo.png" title="my-logo"></p></div></div></div>


<h3 id="2-3-always行为级建模"><a href="#2-3-always行为级建模" class="headerlink" title="2.3 always行为级建模"></a>2.3 always行为级建模</h3><h4 id="①用法"><a href="#①用法" class="headerlink" title="①用法"></a>①用法</h4><ul>
<li>敏感事件<ul>
<li>电平敏感事件</li>
<li>边沿敏感事件<ul>
<li>posedge(上升沿)</li>
<li>negedge(下降沿)</li>
<li>多个边沿敏感事件中，必须有一个事件是时钟事件，其余则是异步事件</li>
</ul>
</li>
<li>电平敏感事件和边沿敏感事件不能同时出现在敏感事件列表中</li>
</ul>
</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">always</span> @ (事件控制表达式)<span class="comment">//always @ (A or B) </span></span><br><span class="line"><span class="keyword">begin</span>: 块名             <span class="comment">//always @ (A , B) </span></span><br><span class="line">                        <span class="comment">//always @ (*) </span></span><br><span class="line">...                     <span class="comment">//过程赋值语句左边必须是reg类型</span></span><br><span class="line"><span class="keyword">end</span>             </span><br></pre></td></tr></table></figure>
<h4 id="②分支"><a href="#②分支" class="headerlink" title="②分支"></a>②分支</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span>(rega)</span><br><span class="line">    常量: 语句;</span><br><span class="line">    <span class="keyword">default</span>: 语句;</span><br><span class="line"><span class="keyword">endcase</span></span><br><span class="line"><span class="comment">// casez 将z视为无关值  </span></span><br><span class="line"><span class="comment">// casex 将z和x都视为无关值</span></span><br></pre></td></tr></table></figure>



<h4 id="③-过程赋值语句"><a href="#③-过程赋值语句" class="headerlink" title="③ 过程赋值语句"></a>③ 过程赋值语句</h4><ul>
<li>阻塞</li>
<li>非阻塞</li>
<li>每个if或 else if都对应着一个异步事件，最后一个else对应着时钟事件</li>
</ul>
<h4 id="④-调用子模块并修改值"><a href="#④-调用子模块并修改值" class="headerlink" title="④ 调用子模块并修改值"></a>④ 调用子模块并修改值</h4><ul>
<li>直接修改参数引用<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块名 #(值) (端口) </span></span><br><span class="line">RegN32 <span class="variable">#(32) u0(Q)</span>;</span><br></pre></td></tr></table></figure></li>
<li>参数重新定义<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">regN u1(Q);</span><br><span class="line"><span class="keyword">defparam</span> u1<span class="variable">.n</span> = <span class="number">32</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="⑤-计数器"><a href="#⑤-计数器" class="headerlink" title="⑤ 计数器"></a>⑤ 计数器</h4><h4 id="⑥-分频器"><a href="#⑥-分频器" class="headerlink" title="⑥ 分频器"></a>⑥ 分频器</h4><h4 id="⑤-有限状态机建模"><a href="#⑤-有限状态机建模" class="headerlink" title="⑤ 有限状态机建模"></a>⑤ 有限状态机建模</h4><ul>
<li><p>Moore 型状态机</p>
<div class="tabs" id="fourth-morre"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-morre-1">代码</a></li><li class="tab"><a href="#fourth-morre-2">状态图</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-morre-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Moore_Model (</span><br><span class="line">    <span class="keyword">input</span> A, CP, CLR, <span class="comment">//输入端口</span></span><br><span class="line">    <span class="keyword">output</span> Y <span class="comment">//输出端口</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] state; <span class="comment">//中间变量</span></span><br><span class="line">    <span class="comment">//用参数定义状态</span></span><br><span class="line">    <span class="keyword">parameter</span> S0=<span class="number">2</span>’b00, S1=<span class="number">2</span>’b01；</span><br><span class="line">    <span class="keyword">parameter</span> S2=<span class="number">2</span>’b10, S3=<span class="number">2</span>’b11;</span><br><span class="line">    <span class="keyword">always</span> @( <span class="keyword">posedge</span> CP, <span class="keyword">negedge</span> CLR) </span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!CLR)  state &lt;=S0;   <span class="comment">//复位</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">case</span>(state)</span><br><span class="line">                S0: <span class="keyword">begin</span> state = (A==<span class="number">1</span>)? S1: S0; <span class="keyword">end</span></span><br><span class="line">                S1: <span class="keyword">begin</span> state = (A==<span class="number">1</span>)? S2: S1; <span class="keyword">end</span></span><br><span class="line">                S2: <span class="keyword">begin</span> state = (A==<span class="number">1</span>)? S3: S2; <span class="keyword">end</span></span><br><span class="line">                S3: <span class="keyword">begin</span> state = (A==<span class="number">1</span>)? S0: S3; <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">assign</span> Y = (state ==S3);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fourth-morre-2"><p><img src="/images/verilog/Moore%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.png" alt="my-logo.png" title="my-logo"></p></div></div></div></li>
<li><p>Mealy 型状态机</p>
</li>
</ul>
<div class="tabs" id="fourth-mealy"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-mealy-1">代码</a></li><li class="tab"><a href="#fourth-mealy-2">状态图</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-mealy-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Mealy_Model ( A, CLR, CP, Y);</span><br><span class="line">    <span class="keyword">input</span> A, CP, CLR; <span class="comment">//输入端口</span></span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> Y; <span class="comment">//输出端口</span></span><br><span class="line">    <span class="comment">//中间变量</span></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] current_state, next_state;</span><br><span class="line">    <span class="comment">//用参数定义状态</span></span><br><span class="line">    <span class="keyword">parameter</span> S0=<span class="number">2</span>’b00, S1=<span class="number">2</span>’b01, S2=<span class="number">2</span>’b11;</span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">negedge</span> CP，<span class="keyword">negedge</span> CLR)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (!CLR)</span><br><span class="line">        current_state &lt;=S0; <span class="comment">//复位</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        current_state &lt;= next_state; <span class="comment">//状态转换</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">always</span> @(current_state，A)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">case</span>(current_state)</span><br><span class="line">            Y = <span class="number">0</span>; <span class="comment">//电路输出</span></span><br><span class="line">            S0: <span class="keyword">begin</span> next_state = (A==<span class="number">1</span>)? S1: S0; <span class="keyword">end</span></span><br><span class="line">            S1: <span class="keyword">begin</span> next_state = (A==<span class="number">1</span>)? S2: S0; <span class="keyword">end</span></span><br><span class="line">            S2: <span class="keyword">if</span> (A==<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">begin</span> next_state = S2; <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">begin</span> Y = <span class="number">1</span>; next_state = S0; <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">begin</span> next_state =S0; <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">endcase</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fourth-mealy-2"><p><img src="/images/verilog/Mealy%E7%8A%B6%E6%80%81%E6%9C%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.png" alt="my-logo.png" title="my-logo"></p></div></div></div>

<h4 id="⑥-四位显示器的动态扫描控制电路设计"><a href="#⑥-四位显示器的动态扫描控制电路设计" class="headerlink" title="⑥ 四位显示器的动态扫描控制电路设计"></a>⑥ 四位显示器的动态扫描控制电路设计</h4><h2 id="3-仿真"><a href="#3-仿真" class="headerlink" title="3. 仿真"></a>3. 仿真</h2><h3 id="3-1-与仿真相关的系统任务"><a href="#3-1-与仿真相关的系统任务" class="headerlink" title="3.1 与仿真相关的系统任务"></a>3.1 与仿真相关的系统任务</h3><ul>
<li>$display 自动换行</li>
<li>$write 不自动换行 </li>
<li>$monitor 信号改变值就打印<ul>
<li>$monitoron和$monitoronoff</li>
</ul>
</li>
<li>$strobe 当前所有的赋值语句都执行完才输出</li>
<li>$time  64位整数的形式返回仿真时间</li>
<li>$realtime 实数形式</li>
<li>$finish 结束仿真（可传参）<ul>
<li>0不输出任何信息</li>
<li>1给出仿真时间和位置</li>
<li>2 给出时间和位置，同时还有所有memory及CPU时间的统计</li>
</ul>
</li>
<li>$stop</li>
<li>$random</li>
</ul>
<h3 id="3-1-任务"><a href="#3-1-任务" class="headerlink" title="3.1 任务"></a>3.1 任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">task&lt;任务名&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">endtask</span><br></pre></td></tr></table></figure>
<p><img src="/images/verilog/%E4%BB%BB%E5%8A%A1%E6%B3%A8%E6%84%8F.png" alt="my-logo.png" title="my-logo"></p>
]]></content>
      <categories>
        <category>fpga</category>
      </categories>
  </entry>
  <entry>
    <title>数字电子技术</title>
    <url>/2021/06/09/fpga/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="3-组合逻辑电路"><a href="#3-组合逻辑电路" class="headerlink" title="3.组合逻辑电路"></a>3.组合逻辑电路</h2><span id="more"></span>
<h3 id="3-1-组合逻辑电路分析"><a href="#3-1-组合逻辑电路分析" class="headerlink" title="3.1 组合逻辑电路分析"></a>3.1 组合逻辑电路分析</h3><ol>
<li>从输入到输出写出逻辑函数的表达式</li>
<li>将表达式化简</li>
<li>列出真值表</li>
<li>分析功能</li>
</ol>
<h3 id="3-2-组合逻辑电路设计"><a href="#3-2-组合逻辑电路设计" class="headerlink" title="3.2 组合逻辑电路设计"></a>3.2 组合逻辑电路设计</h3><ul>
<li>步骤与分析相反</li>
</ul>
<p><strong>①例子：将格雷码转换为自然二进制码</strong></p>
<ol>
<li>真值表<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A0%81%E7%9A%84%E7%9C%9F%E5%80%BC%E8%A1%A8.png" title="图片"></li>
<li>卡诺图化简<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">B1</th>
<th align="center">B2</th>
<th align="center">B3</th>
<th align="center">B4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">卡诺图</td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b3%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b2%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b1%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b0%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
</tr>
<tr>
<td align="center">表达式</td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b3%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b2%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b1%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6b0%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li>电路<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%A0%BC%E9%9B%B7%E7%A0%81%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A0%81%E7%94%B5%E8%B7%AF.png" title="图片"></li>
</ol>
<p><strong>②电路优化</strong></p>
<ol>
<li>单输出电路：相同输入端的与非门比与门或者或门速度快</li>
<li>多输出电路：考虑共享相同乘机项</li>
<li>多级逻辑电路：<ul>
<li>提取公因子</li>
<li>函数分解</li>
</ul>
</li>
</ol>
<h3 id="3-3-组合逻辑电路竞争冒险"><a href="#3-3-组合逻辑电路竞争冒险" class="headerlink" title="3.3 组合逻辑电路竞争冒险"></a>3.3 组合逻辑电路竞争冒险</h3><ul>
<li>竞争：在组合电路中，信号经由不同的途径达到某一会合点的时间有先有后，这种现象称为竞争。</li>
<li>冒险：由于竞争而引起电路输出发生瞬间错误现象称为冒险。表现为输出端出现了原设计中没有的窄脉冲，常称其为毛刺。</li>
</ul>
<h4 id="①消除方法"><a href="#①消除方法" class="headerlink" title="①消除方法"></a>①消除方法</h4><ul>
<li>消除互补项：L=(A + B)(A’ + C)（当B=C=0时L=AA’，将L展开）</li>
<li>增加乘积项，避免互补项相加:L=AC+BC’（当A=B=1时L=C+C’,根据卡诺图添加冗余项AB）</li>
<li>输出端并联电容</li>
</ul>
<h3 id="3-4-编码器"><a href="#3-4-编码器" class="headerlink" title="3.4 编码器"></a>3.4 编码器</h3><h4 id="①普通编码器"><a href="#①普通编码器" class="headerlink" title="①普通编码器"></a>①普通编码器</h4><div class="tabs" id="fourth-common_4to2"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-common_4to2-1">代码</a></li><li class="tab"><a href="#fourth-common_4to2-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-common_4to2-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4线二线</span></span><br><span class="line"><span class="keyword">module</span> common_4to2(i0,i1,i2,i3,y0,y1);</span><br><span class="line"><span class="keyword">input</span> i1,i2,i3,i0;</span><br><span class="line"><span class="keyword">output</span> y1,y0;</span><br><span class="line"><span class="keyword">assign</span> y0 = i1|i3,y1 = i2|i3;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fourth-common_4to2-2"><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/common_4to2%E7%94%B5%E8%B7%AF%E5%9B%BE.png" title="图片"></p></div></div></div>


<h4 id="②优先编码器"><a href="#②优先编码器" class="headerlink" title="②优先编码器"></a>②优先编码器</h4><div class="tabs" id="fourth-priority_4to2"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-priority_4to2-1">代码</a></li><li class="tab"><a href="#fourth-priority_4to2-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-priority_4to2-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4线二线</span></span><br><span class="line"><span class="keyword">module</span> priority_4to2(i0,i1,i2,i3,y0,y1);</span><br><span class="line"><span class="keyword">input</span> i0,i1,i2,i3;</span><br><span class="line"><span class="keyword">output</span> y0,y1;</span><br><span class="line"><span class="keyword">assign</span> y0 = i1&amp;~i2|i3,</span><br><span class="line">        y1 = i2|i3;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fourth-priority_4to2-2"><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/priority_4to2%E7%94%B5%E8%B7%AF%E5%9B%BE.png" title="图片"></p></div></div></div>



<h4 id="③编码器的应用"><a href="#③编码器的应用" class="headerlink" title="③编码器的应用"></a>③编码器的应用</h4><ul>
<li>常用编码器<ul>
<li>74x147:10线-4线优先编码器，低电平有效</li>
<li>74x148:8线-3线优先编码器，低电平有效</li>
<li>CD4532:8线-3线优先编码器，高电平有效</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">CD4532逻辑符号</th>
<th align="center">引脚图</th>
<th align="center">功能表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/CD4532%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/CD4532%E5%BC%95%E8%84%9A%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/CD4532%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
</tr>
</tbody></table>
<h3 id="3-5-译码器"><a href="#3-5-译码器" class="headerlink" title="3.5 译码器"></a>3.5 译码器</h3><h4 id="①二进制译码器"><a href="#①二进制译码器" class="headerlink" title="①二进制译码器"></a>①二进制译码器</h4><ul>
<li>74x139:2线-4线译码器(双)，低电平有效</li>
<li>74x138:3线-8线译码器</li>
<li>74HC138:3线-8线集成电路译码器</li>
</ul>
<div class="tabs" id="fourth-二进制译码器"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-二进制译码器-1">代码</a></li><li class="tab"><a href="#fourth-二进制译码器-2">电路</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-二进制译码器-1"><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2线4线</span></span><br><span class="line"><span class="keyword">module</span> two2to4(e,a0,a1,y0,y1,y2,y3);</span><br><span class="line"><span class="keyword">input</span> a0,a1,e;</span><br><span class="line"><span class="keyword">output</span> y0,y1,y2,y3;</span><br><span class="line"><span class="keyword">assign</span> y0 = ~a1&amp;~a0&amp;e,</span><br><span class="line">    y1 = ~a1&amp;a0&amp;e,</span><br><span class="line">    y2 = a1&amp;~a0&amp;e,</span><br><span class="line">    y3 = a1&amp;a0&amp;e;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="fourth-二进制译码器-2"><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/2to4%E8%AF%91%E7%A0%81%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></p></div></div></div>

<div class="tabs" id="fourth-常用译码器"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-常用译码器-1">74x139</a></li><li class="tab"><a href="#fourth-常用译码器-2">74HC138</a></li><li class="tab"><a href="#fourth-常用译码器-3">两片74HC138串联</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-常用译码器-1"><table>
<thead>
<tr>
<th align="center">逻辑符号</th>
<th align="center">逻辑图</th>
<th align="center">功能表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74x139%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/2to4%E8%AF%91%E7%A0%81%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74x139%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
</tr>
</tbody></table></div><div class="tab-pane" id="fourth-常用译码器-2"><table>
<thead>
<tr>
<th align="center">逻辑符号</th>
<th align="center">逻辑图</th>
<th align="center">功能表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC138%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC138%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC138%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
</tr>
</tbody></table></div><div class="tab-pane" id="fourth-常用译码器-3"><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%A4%E7%89%8774HC138.png" title="图片"></p></div></div></div>


<h4 id="②二-十进制译码器"><a href="#②二-十进制译码器" class="headerlink" title="②二-十进制译码器"></a>②二-十进制译码器</h4><ul>
<li>略</li>
</ul>
<h4 id="③显示译码器"><a href="#③显示译码器" class="headerlink" title="③显示译码器"></a>③显示译码器</h4><ul>
<li>由译码驱动器和数码显示器组成</li>
<li>74HC4511（高电平有效）</li>
</ul>
<table>
<thead>
<tr>
<th align="center">74HC4511逻辑符号</th>
<th align="center">功能表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC4511%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC4511%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
</tr>
</tbody></table>
<h4 id="④-锁存器"><a href="#④-锁存器" class="headerlink" title="④ 锁存器"></a>④ 锁存器</h4><ul>
<li>静态显示电路</li>
<li>动态扫描显示电路</li>
</ul>
<h3 id="3-6-数据分配器"><a href="#3-6-数据分配器" class="headerlink" title="3.6 数据分配器"></a>3.6 数据分配器</h3><ul>
<li>可用译码器实现数据分配器</li>
</ul>
<h3 id="3-7-数据选择器"><a href="#3-7-数据选择器" class="headerlink" title="3.7 数据选择器"></a>3.7 数据选择器</h3><h4 id="①二选一数据选择器"><a href="#①二选一数据选择器" class="headerlink" title="①二选一数据选择器"></a>①二选一数据选择器</h4><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%BA%8C%E9%80%89%E4%B8%80%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8%E5%9B%BE.png" title="图片"></p>
<h4 id="②四选一数据选择器"><a href="#②四选一数据选择器" class="headerlink" title="②四选一数据选择器"></a>②四选一数据选择器</h4><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%9B%9B%E9%80%89%E4%B8%80%E6%95%B0%E6%8D%AE%E9%80%89%E6%8B%A9%E5%99%A8%E5%9B%BE.png" title="图片"></p>
<h4 id="③常用集成电路数据选择器"><a href="#③常用集成电路数据选择器" class="headerlink" title="③常用集成电路数据选择器"></a>③常用集成电路数据选择器</h4><ul>
<li>74x157:有4个二选一</li>
<li>74x153:双4选1数据选择器</li>
<li>74x253:双4选1数据选择器（带有三态输出）</li>
<li>74x151:8选1数据选择器</li>
<li>74x251:8选1数据选择器（带有三态输出）</li>
</ul>
<h3 id="3-8-数值比较器"><a href="#3-8-数值比较器" class="headerlink" title="3.8 数值比较器"></a>3.8 数值比较器</h3><h4 id="①一位数值比较器"><a href="#①一位数值比较器" class="headerlink" title="①一位数值比较器"></a>①一位数值比较器</h4><ul>
<li>F(A&gt;B):AB’</li>
<li>F(A&lt;B):A’B</li>
<li>F(A=B):A’B’+AB = (AB’+A’B)’</li>
</ul>
<h4 id="②两位数值比较器"><a href="#②两位数值比较器" class="headerlink" title="②两位数值比较器"></a>②两位数值比较器</h4><table>
<thead>
<tr>
<th align="center">真值表</th>
<th align="center">表达式</th>
<th align="center">逻辑图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E7%9C%9F%E5%80%BC%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%A4%E4%BD%8D%E6%95%B0%E5%80%BC%E6%AF%94%E8%BE%83%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
<h4 id="③数值比较器应用"><a href="#③数值比较器应用" class="headerlink" title="③数值比较器应用"></a>③数值比较器应用</h4><ul>
<li>74HC85</li>
<li>功能表：<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC85%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></li>
<li>位扩展</li>
<li><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC85%E4%BD%8D%E6%89%A9%E5%B1%95.png" title="图片"></li>
<li>位扩展16位优化</li>
<li><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC85%E6%89%A9%E5%B1%9516%E4%BD%8D%E4%BC%98%E5%8C%96.png" title="图片"></li>
</ul>
<h4 id="④加法器"><a href="#④加法器" class="headerlink" title="④加法器"></a>④加法器</h4><ul>
<li><p>半加器</p>
</li>
<li><p>全加器</p>
<table>
<thead>
<tr>
<th align="center">真值表</th>
<th align="center">表达式</th>
<th align="center">逻辑图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%85%A8%E5%8A%A0%E5%99%A8%E7%9C%9F%E5%80%BC%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%85%A8%E5%8A%A0%E5%99%A8%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%85%A8%E5%8A%A0%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>超前进位加法器</p>
</li>
</ul>
<h2 id="4-锁存器和触发器"><a href="#4-锁存器和触发器" class="headerlink" title="4. 锁存器和触发器"></a>4. 锁存器和触发器</h2><h3 id="4-1-基本双稳态电路"><a href="#4-1-基本双稳态电路" class="headerlink" title="4.1 基本双稳态电路"></a>4.1 基本双稳态电路</h3><ul>
<li><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%9F%BA%E6%9C%AC%E5%8F%8C%E7%A8%B3%E6%80%81%E8%A7%A6%E5%8F%91%E5%99%A81.png" title="图片"></p>
</li>
<li><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%9F%BA%E6%9C%AC%E5%8F%8C%E7%A8%B3%E6%80%81%E8%A7%A6%E5%8F%91%E5%99%A82.png" title="图片"></p>
</li>
</ul>
<h3 id="4-2-SR锁存器"><a href="#4-2-SR锁存器" class="headerlink" title="4.2 SR锁存器"></a>4.2 SR锁存器</h3><ul>
<li><p>或非门实现</p>
<table>
<thead>
<tr>
<th align="center">SR锁存器逻辑图</th>
<th align="center">功能表</th>
<th align="center">逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E9%94%81%E5%AD%98%E5%99%A8%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>与非门实现</p>
<table>
<thead>
<tr>
<th align="center">SR锁存器逻辑图</th>
<th align="center">功能表</th>
<th align="center">等效逻辑图</th>
<th align="center">常用逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%AE%9E%E7%8E%B0SR.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%AE%9E%E7%8E%B0SR%E7%AD%89%E6%95%88%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%AE%9E%E7%8E%B0SR%E5%B8%B8%E7%94%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>门控SR锁存器</p>
<ul>
<li>令输入信号在某一时刻起作用<table>
<thead>
<tr>
<th align="center">逻辑图</th>
<th align="center">功能表</th>
<th align="center">逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%97%A8%E6%8E%A7SR%E9%94%81%E5%AD%98%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%97%A8%E6%8E%A7SR%E9%94%81%E5%AD%98%E5%99%A8%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%97%A8%E6%8E%A7SR%E9%94%81%E5%AD%98%E5%99%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h3 id="4-3-D锁存器"><a href="#4-3-D锁存器" class="headerlink" title="4.3 D锁存器"></a>4.3 D锁存器</h3><ul>
<li><p>逻辑门控D锁存器</p>
<table>
<thead>
<tr>
<th align="center">逻辑图</th>
<th align="center">功能表</th>
<th align="center">逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%80%BB%E8%BE%91%E9%97%A8%E6%8E%A7D%E9%94%81%E5%AD%98%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%80%BB%E8%BE%91%E9%97%A8%E6%8E%A7D%E9%94%81%E5%AD%98%E5%99%A8%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%80%BB%E8%BE%91%E9%97%A8%E6%8E%A7D%E9%94%81%E5%AD%98%E5%99%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>传输门控D锁存器</p>
<table>
<thead>
<tr>
<th align="center">逻辑图</th>
<th align="center">功能表</th>
<th align="center">逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%BC%A0%E8%BE%93%E9%97%A8%E6%8E%A7D%E9%94%81%E5%AD%98%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E9%80%BB%E8%BE%91%E9%97%A8%E6%8E%A7D%E9%94%81%E5%AD%98%E5%99%A8%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
<td align="center">与逻辑门控D相同</td>
</tr>
</tbody></table>
</li>
<li><p>动态特性</p>
<ul>
<li>tpLH(D-Q)：Q从低到高时，D的延迟时间</li>
<li>tpHL(D-Q)：Q从高到低时，D的延迟时间</li>
<li>tsu：建立时间，D信号在E有效跳变沿到来之前必须稳定不变的最小时间</li>
<li>tH：保持时间，D信号在E有效跳变沿到来之后必须稳定不变的最小时间</li>
<li>tw：脉冲宽度的最小值</li>
</ul>
</li>
</ul>
<h3 id="4-4-触发器电路结构和工作原理"><a href="#4-4-触发器电路结构和工作原理" class="headerlink" title="4.4 触发器电路结构和工作原理"></a>4.4 触发器电路结构和工作原理</h3><ul>
<li>锁存器为电平触发，触发器为边沿触发</li>
</ul>
<ol>
<li><p>主从D触发器</p>
<table>
<thead>
<tr>
<th align="center">原理性框图</th>
<th align="center">传输门控D锁存器实现</th>
<th align="center">逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%BB%E4%BB%8ED%E8%A7%A6%E5%8F%91%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%BC%A0%E8%BE%93%E9%97%A8%E6%8E%A7D%E9%94%81%E5%AD%98%E5%99%A8%E5%AE%9E%E7%8E%B0%E4%B8%BB%E4%BB%8ED%E8%A7%A6%E5%8F%91%E5%99%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E4%B8%BB%E4%BB%8ED%E8%A7%A6%E5%8F%91%E5%99%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
<ul>
<li>加入异步输入端<table>
<thead>
<tr>
<th align="center">逻辑图</th>
<th align="center">功能表</th>
<th align="center">逻辑符号</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E8%BE%93%E5%85%A5%E7%AB%AF%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E8%BE%93%E5%85%A5%E7%AB%AF%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E8%BE%93%E5%85%A5%E7%AB%AF%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>维持阻塞D触发器<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E7%BB%B4%E6%8C%81%E9%98%BB%E5%A1%9ED%E8%A7%A6%E5%8F%91%E5%99%A8.png" title="图片"></p>
<h3 id="4-5-触发器的逻辑功能"><a href="#4-5-触发器的逻辑功能" class="headerlink" title="4.5 触发器的逻辑功能"></a>4.5 触发器的逻辑功能</h3></li>
</ol>
<ul>
<li><p>D触发器</p>
<ul>
<li>特性方程<img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/D%E8%A7%A6%E5%8F%91%E5%99%A8%E7%89%B9%E6%80%A7%E6%96%B9%E7%A8%8B.png" title="图片"></li>
</ul>
</li>
<li><p>jk触发器</p>
<table>
<thead>
<tr>
<th align="center">逻辑符号</th>
<th align="center">特性表</th>
<th align="center">状态图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/jk%E8%A7%A6%E5%8F%91%E5%99%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/jk%E8%A7%A6%E5%8F%91%E5%99%A8%E7%89%B9%E6%80%A7%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/jk%E8%A7%A6%E5%8F%91%E5%99%A8%E7%8A%B6%E6%80%81%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
<ul>
<li>特性方程<img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/jk%E8%A7%A6%E5%8F%91%E5%99%A8%E7%89%B9%E6%80%A7%E6%96%B9%E7%A8%8B.png" title="图片"></li>
</ul>
</li>
<li><p>T触发器</p>
<table>
<thead>
<tr>
<th align="center">逻辑符号</th>
<th align="center">特性表</th>
<th align="center">状态图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/T%E8%A7%A6%E5%8F%91%E5%99%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/T%E8%A7%A6%E5%8F%91%E5%99%A8%E7%89%B9%E6%80%A7%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/T%E8%A7%A6%E5%8F%91%E5%99%A8%E7%8A%B6%E6%80%81%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
<ul>
<li>特性方程<img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/T%E8%A7%A6%E5%8F%91%E5%99%A8%E7%89%B9%E6%80%A7%E6%96%B9%E7%A8%8B.png" title="图片"></li>
</ul>
</li>
<li><p>SR触发器</p>
<table>
<thead>
<tr>
<th align="center">逻辑符号</th>
<th align="center">特性表</th>
<th align="center">状态图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E8%A7%A6%E5%8F%91%E5%99%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E8%A7%A6%E5%8F%91%E5%99%A8%E7%89%B9%E6%80%A7%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/SR%E8%A7%A6%E5%8F%91%E5%99%A8%E7%8A%B6%E6%80%81%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="5-时序逻辑电路"><a href="#5-时序逻辑电路" class="headerlink" title="5.时序逻辑电路"></a>5.时序逻辑电路</h2><h3 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1 基本概念"></a>5.1 基本概念</h3><ul>
<li>时序逻辑电路<ul>
<li>含有锁存器或触发器的电路为时序逻辑电路</li>
<li>时序逻辑电路动作特点分类<ul>
<li>同步时序电路</li>
<li>异步时序电路(状态更新不是同一时刻)</li>
</ul>
</li>
<li>输出信号特点分类<ul>
<li>米利型电路(输出与输入变量有直接关系)</li>
<li>穆尔型电路(输出只取决于触发器状态)</li>
</ul>
</li>
</ul>
</li>
<li>描述时序逻辑电路的方法<ol>
<li>方程<ul>
<li>激励方程</li>
<li>输出方程</li>
<li>状态方程</li>
</ul>
</li>
<li>图表<ul>
<li>状态转换表</li>
<li>状态转换图</li>
<li>时序图</li>
</ul>
</li>
</ol>
</li>
<li>例子<table>
<thead>
<tr>
<th align="center">逻辑图</th>
<th align="center">方程组</th>
<th align="center">状态转换表</th>
<th align="center">状态转换图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8F%8F%E8%BF%B0%E6%96%B9%E6%B3%95%E4%B8%BE%E4%BE%8B%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8F%8F%E8%BF%B0%E6%96%B9%E6%B3%95%E4%B8%BE%E4%BE%8B%E6%96%B9%E7%A8%8B%E7%BB%84.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8F%8F%E8%BF%B0%E6%96%B9%E6%B3%95%E4%B8%BE%E4%BE%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E6%8F%8F%E8%BF%B0%E6%96%B9%E6%B3%95%E4%B8%BE%E4%BE%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="5-2-同步时序逻辑电路分析"><a href="#5-2-同步时序逻辑电路分析" class="headerlink" title="5.2 同步时序逻辑电路分析"></a>5.2 同步时序逻辑电路分析</h3><ul>
<li>列写方程<ol>
<li>激励方程 </li>
<li>状态方程</li>
<li>输出方程</li>
</ol>
</li>
<li>列图表<ol>
<li>状态表</li>
<li>状态图</li>
<li>时序图</li>
</ol>
</li>
<li>确定功能</li>
</ul>
<h3 id="5-3-同步时序逻辑电路设计"><a href="#5-3-同步时序逻辑电路设计" class="headerlink" title="5.3 同步时序逻辑电路设计"></a>5.3 同步时序逻辑电路设计</h3><p><strong>问题:</strong> 用D触发器设计一个8421BCD码同步十进制加计数器</p>
<ol>
<li><p>逻辑抽象得出状态转换图或状态转换表</p>
<ul>
<li><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E8%A1%A8.png" title="图片"></li>
</ul>
</li>
<li><p>状态化简</p>
<table>
<thead>
<tr>
<th align="center">卡诺图</th>
<th align="center">D0</th>
<th align="center">D1</th>
<th align="center">D2</th>
<th align="center">D3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">卡诺图</td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D0%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D1%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D2%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D3%E5%8D%A1%E8%AF%BA%E5%9B%BE.png" title="图片"></td>
</tr>
<tr>
<td align="center">表达式</td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D0%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D1%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D2%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1D3%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" title="图片"></td>
</tr>
</tbody></table>
</li>
<li><p>状态分配<br>2^4 &gt; 10 #10种状态用四个触发器</p>
</li>
<li><p>选择触发器类型<br>选择D</p>
</li>
<li><p>确定激励方程和输出方程</p>
</li>
<li><p>画出逻辑图<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1%E7%94%B5%E8%B7%AF%E5%9B%BE.png" title="图片"></p>
</li>
<li><p>检查自启动功能<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%BE%E8%AE%A1%E5%90%8C%E6%AD%A5%E6%97%B6%E5%BA%8F1%E6%A3%80%E6%9F%A5%E8%87%AA%E5%90%AF%E5%8A%A8.png" title="图片"></p>
</li>
</ol>
<h3 id="5-4-异步时序逻辑电路分析"><a href="#5-4-异步时序逻辑电路分析" class="headerlink" title="5.4 异步时序逻辑电路分析"></a>5.4 异步时序逻辑电路分析</h3><h4 id="①-基本步骤"><a href="#①-基本步骤" class="headerlink" title="① 基本步骤"></a>① 基本步骤</h4><p><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90%E6%AD%A5%E9%AA%A4.png" title="图片"></p>
<h4 id="②-例子"><a href="#②-例子" class="headerlink" title="② 例子"></a>② 例子</h4><ul>
<li><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90%E4%B8%BE%E4%BE%8B1%E7%94%B5%E8%B7%AF%E5%9B%BE.png" title="图片"></li>
</ul>
<ol>
<li>写出电路方程<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90%E4%B8%BE%E4%BE%8B1%E7%94%B5%E8%B7%AF%E6%96%B9%E7%A8%8B.png" title="图片"></li>
<li>列图表<table>
<thead>
<tr>
<th align="center">状态转换表</th>
<th align="center">状态图</th>
<th align="center">时序图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90%E4%B8%BE%E4%BE%8B1%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E8%A1%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90%E4%B8%BE%E4%BE%8B1%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E5%BC%82%E6%AD%A5%E6%97%B6%E5%BA%8F%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF%E5%88%86%E6%9E%90%E4%B8%BE%E4%BE%8B1%E6%B3%A2%E5%BD%A2%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="5-5-寄存器和移位寄存器"><a href="#5-5-寄存器和移位寄存器" class="headerlink" title="5.5 寄存器和移位寄存器"></a>5.5 寄存器和移位寄存器</h3><p>74HC/HCT194</p>
<table>
<thead>
<tr>
<th align="center">电路图</th>
<th align="center">功能表</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC_HCT194.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/74HC_HCT194%E5%8A%9F%E8%83%BD%E8%A1%A8.png" title="图片"></td>
</tr>
</tbody></table>
<h3 id="5-6-计数器概念和异步二进制计数器"><a href="#5-6-计数器概念和异步二进制计数器" class="headerlink" title="5.6 计数器概念和异步二进制计数器"></a>5.6 计数器概念和异步二进制计数器</h3><ul>
<li>计数器分类<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/%E8%AE%A1%E6%95%B0%E5%99%A8%E5%88%86%E7%B1%BB.png" title="图片"></li>
</ul>
<h4 id="①-4位异步二进制加计数器工作原理"><a href="#①-4位异步二进制加计数器工作原理" class="headerlink" title="① 4位异步二进制加计数器工作原理"></a>① 4位异步二进制加计数器工作原理</h4><ol>
<li>用T`触发器构成<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/4%E4%BD%8D%E5%BC%82%E6%AD%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" title="图片"></li>
<li>波形图<br><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/4%E4%BD%8D%E5%BC%82%E6%AD%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%B3%A2%E5%BD%A2%E5%9B%BE.png" title="图片"></li>
</ol>
<h3 id="5-7-同步二级制计数器"><a href="#5-7-同步二级制计数器" class="headerlink" title="5.7 同步二级制计数器"></a>5.7 同步二级制计数器</h3><h4 id="①四位同步二进制加计数器"><a href="#①四位同步二进制加计数器" class="headerlink" title="①四位同步二进制加计数器"></a>①四位同步二进制加计数器</h4><table>
<thead>
<tr>
<th align="center">激励方程</th>
<th align="center">逻辑图</th>
<th align="center">波形图</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/4%E4%BD%8D%E5%90%8C%E6%AD%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%99%A8%E6%BF%80%E5%8A%B1%E6%96%B9%E7%A8%8B.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/4%E4%BD%8D%E5%90%8C%E6%AD%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%99%A8%E9%80%BB%E8%BE%91%E5%9B%BE.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E5%AD%97%E7%94%B5%E5%AD%90/4%E4%BD%8D%E5%90%8C%E6%AD%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%99%A8%E6%97%B6%E5%BA%8F%E5%9B%BE.png" title="图片"></td>
</tr>
</tbody></table>
<h4 id="②74LVC161"><a href="#②74LVC161" class="headerlink" title="②74LVC161"></a>②74LVC161</h4><h3 id="5-8-计数器应用"><a href="#5-8-计数器应用" class="headerlink" title="5.8 计数器应用"></a>5.8 计数器应用</h3><ul>
<li>用74LVC161构成9进制加计数器</li>
</ul>
<h2 id="6-verilog"><a href="#6-verilog" class="headerlink" title="6.verilog"></a>6.verilog</h2><h2 id="7-逻辑门电路"><a href="#7-逻辑门电路" class="headerlink" title="7.逻辑门电路"></a>7.逻辑门电路</h2><h3 id="7-1-简介"><a href="#7-1-简介" class="headerlink" title="7.1 简介"></a>7.1 简介</h3><ul>
<li><p>分类</p>
<ul>
<li><p>MOS</p>
<ul>
<li>NMOS</li>
<li>PMOS</li>
<li>CMOS<ul>
<li>4000系列与ttl不兼容</li>
<li>HC/HCT系列速度快与ttl兼容</li>
<li>AHC/AHCT速度快HC2倍</li>
<li>lVC低电压</li>
<li>AUC超低电压</li>
</ul>
</li>
</ul>
</li>
<li><p>双极型</p>
<ul>
<li>TTL<ul>
<li>SN74/54系列（早期）</li>
<li>54/74HC00<ul>
<li>HC表示不同系列</li>
<li>00表示四个两输入与非门</li>
<li>54温度范围更宽，测试更严格</li>
</ul>
</li>
</ul>
</li>
<li>ECL</li>
</ul>
</li>
<li><p>混合型</p>
<ul>
<li>BiCMOS</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="7-2-MOS管"><a href="#7-2-MOS管" class="headerlink" title="7.2 MOS管"></a>7.2 MOS管</h3><ul>
<li>分类<ul>
<li>增强型<ul>
<li>N沟道</li>
<li>P沟道</li>
</ul>
</li>
<li>耗尽型<ul>
<li>N沟道</li>
<li>P沟道</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="8-半导体存储器"><a href="#8-半导体存储器" class="headerlink" title="8. 半导体存储器"></a>8. 半导体存储器</h2><h3 id="8-1-存储器分类"><a href="#8-1-存储器分类" class="headerlink" title="8.1 存储器分类"></a>8.1 存储器分类</h3><ul>
<li><p>易失性RAM</p>
</li>
<li><p>非易失性Rom</p>
<ul>
<li>固定ROM</li>
<li>可编程ROM<ul>
<li>一次可编程ROM(PROM)</li>
<li>光可擦除可编程ROM(EPROM)用紫外线照射</li>
<li>光可擦除可编程ROM(EEPROM)</li>
<li>闪存flash memory</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>数电</title>
    <url>/2021/05/24/fpga/%E6%95%B0%E7%94%B5/</url>
    <content><![CDATA[<h1 id="一-基础知识"><a href="#一-基础知识" class="headerlink" title="一.基础知识"></a>一.基础知识</h1><h2 id="1-基本定理和规则"><a href="#1-基本定理和规则" class="headerlink" title="1.基本定理和规则"></a>1.基本定理和规则</h2><span id="more"></span>  
<h3 id="1-1基本定理"><a href="#1-1基本定理" class="headerlink" title="1.1基本定理"></a>1.1基本定理</h3><table>
<thead>
<tr>
<th align="left">公里</th>
<th align="center">0</th>
</tr>
</thead>
<tbody><tr>
<td align="left">交换律</td>
<td align="center">A + B = B + A 　　 A · B = B · A</td>
</tr>
<tr>
<td align="left">结合律</td>
<td align="center">(A + B) + C = A + (B + C) 　　(A · B) · C = A · (B · C)</td>
</tr>
<tr>
<td align="left">分配律</td>
<td align="center">A + (B · C) = (A + B)·(A + C) 　　A · (B + C) = A · B + A · C</td>
</tr>
<tr>
<td align="left">0-1律</td>
<td align="center">A + 0 = A 　　A + 1 = 1 　　A · 0 = 0 　　A · 1 = A</td>
</tr>
<tr>
<td align="left">互补律</td>
<td align="center">A + A’ = 1 　　A · A’ = 0</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">定理</th>
<th align="center">0</th>
</tr>
</thead>
<tbody><tr>
<td align="left">定理1</td>
<td align="center">0 + 0 = 0 　　1 + 1 = 1</td>
</tr>
<tr>
<td align="left">定理2</td>
<td align="center">A + A = A 　　A · A = A</td>
</tr>
<tr>
<td align="left">定理3</td>
<td align="center">A + A · B = A　　A · (A + B) = A</td>
</tr>
<tr>
<td align="left">定理4</td>
<td align="center">A + A’B = A + B　　A · (A’ + B) = AB</td>
</tr>
<tr>
<td align="left">定理5</td>
<td align="center">A’’ = A</td>
</tr>
<tr>
<td align="left">定理6</td>
<td align="center">(A + B)’ = A’ + B’</td>
</tr>
<tr>
<td align="left">定理7</td>
<td align="center">A · B + A · B’ = A　　(A + B)(A + B’) = A</td>
</tr>
<tr>
<td align="left">定理8</td>
<td align="center">A · B + A’ · C + B · C = A · B + A’ · C 　　 (A + B) · (A’ + C) · (B + C) = (A + B) · (A’ + C)</td>
</tr>
</tbody></table>
<h3 id="1-2重要规则"><a href="#1-2重要规则" class="headerlink" title="1.2重要规则"></a>1.2重要规则</h3><p><strong>①代入规则</strong><br><strong>②反演规则</strong></p>
<ul>
<li>与变或，或变与，原变反，反变原，1变0，0变1</li>
<li>保证运算顺序不变<blockquote>
<p>则新的函数为原函数F的反函数F’</p>
</blockquote>
</li>
</ul>
<p><strong>③对偶式</strong></p>
<ul>
<li>与变或，或变与，1变0，0变1</li>
<li>保证运算顺序不变<blockquote>
<p>则新的函数为原函数F的对偶式(若F的对偶式=F，则F为自对偶函数；若F=G -&gt; F的对偶式 = G的对偶式 )</p>
</blockquote>
</li>
</ul>
<h3 id="1-3复合逻辑"><a href="#1-3复合逻辑" class="headerlink" title="1.3复合逻辑"></a>1.3复合逻辑</h3><table>
<thead>
<tr>
<th align="left">复合逻辑</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">与非</td>
<td align="center">仅当全部变量为1是结果为0</td>
</tr>
<tr>
<td align="left">或非</td>
<td align="center">仅当全部变量为0是结果为1</td>
</tr>
<tr>
<td align="left">与或非</td>
<td align="center">-</td>
</tr>
<tr>
<td align="left">异或</td>
<td align="center">变量相同为0，不同为1</td>
</tr>
</tbody></table>
<h2 id="2-表达式的形式与变换"><a href="#2-表达式的形式与变换" class="headerlink" title="2.表达式的形式与变换"></a>2.表达式的形式与变换</h2><h3 id="2-1基本形式"><a href="#2-1基本形式" class="headerlink" title="2.1基本形式"></a>2.1基本形式</h3><p><strong>①与-或表达式</strong></p>
<blockquote>
<p>若干与项进行或运算的表达式</p>
</blockquote>
<p><strong>②或-与表达式</strong></p>
<blockquote>
<p>若干积项进行与运算的表达式</p>
</blockquote>
<h3 id="2-2标准形式"><a href="#2-2标准形式" class="headerlink" title="2.2标准形式"></a>2.2标准形式</h3><p><strong>①最小项性质</strong></p>
<ul>
<li>仅有一种取值令最小项为1</li>
<li>mi · mj = 0</li>
<li>全部最小项相或为1</li>
<li>n个变量构成的最小项有n个相邻最小项<blockquote>
<p>例：F=A’BC’ + A’BC + ABC’ + ABC = m2+m3+m6+m7</p>
</blockquote>
</li>
</ul>
<p><strong>②最大项性质</strong></p>
<ul>
<li>仅有一种取值令最大项为0</li>
<li>Mi + Mj = 1</li>
<li>全部最大项相与为0</li>
<li>n个变量构成的最大项有n个相邻最大项<blockquote>
<p>例：F = (A + B + C)(A + B +C’) = M0M1</p>
</blockquote>
</li>
</ul>
<p><strong>③最大项和最小项的关系</strong></p>
<ul>
<li>下标相同的最小项和最大项互为反函数</li>
<li>mi和Mj存在互补关系</li>
</ul>
<h3 id="2-3转换方法"><a href="#2-3转换方法" class="headerlink" title="2.3转换方法"></a>2.3转换方法</h3><p><strong>①代数转换法</strong><br>转换为与或</p>
<ol>
<li>将表达式化为一般与或表达式</li>
<li>反复使用X = X · (Y + Y’)<br>转换为或与</li>
<li>将表达式化为一般或与表达式</li>
<li>反复使用X = (X + Y)·(X + Y’) </li>
</ol>
<p><strong>②真值表转换法</strong></p>
<blockquote>
<p>将取值为1的情况或起来或将取值为0的情况与起来</p>
</blockquote>
<h3 id="2-4逻辑函数化简"><a href="#2-4逻辑函数化简" class="headerlink" title="2.4逻辑函数化简"></a>2.4逻辑函数化简</h3><p><strong>①代数化简法</strong><br>与或表达式化简</p>
<ul>
<li>并项法：A · B + A · B’ = A</li>
<li>吸收法：A + A · B = A</li>
<li>消去法：A + A’B = A + B</li>
<li>配项法：A · 1 = A 及 A + A’ = 1</li>
</ul>
<p><strong>②卡诺图</strong><br>特点</p>
<ul>
<li>n个变量的卡诺图由2^n个小方格构成</li>
<li>几何图形上相邻、相对、相重位置的小方格代表相邻最小项合并规律</li>
<li>合并理论依据：A · B + A · B’ = A</li>
<li>相邻最小项有一个变量互反，可以合并为一项（卡诺圈）<br>化简</li>
</ul>
<ol>
<li>做出卡诺图</li>
<li>圈出全部质蕴含项</li>
<li>从全部质蕴含项中找出必要质蕴含项</li>
<li>求函数最简质蕴含项集<blockquote>
<p>蕴含项：任何一个mi<br>质蕴含项：某个卡诺圈没有被其他更大的卡诺圈包含，则该卡诺圈的与项为质蕴含项<br>必要质蕴含项：卡诺圈包含了不可能被其他圈包含的方格，该卡诺圈的与项为必要质蕴含项</p>
</blockquote>
</li>
</ol>
<p><strong>③列表化简法</strong><br><a href="https://www.bilibili.com/video/BV197411u7dZ?p=24">视频教程</a></p>
<h2 id="3-集成门电路和触发器"><a href="#3-集成门电路和触发器" class="headerlink" title="3.集成门电路和触发器"></a>3.集成门电路和触发器</h2><h3 id="3-1-半导体的开关特性"><a href="#3-1-半导体的开关特性" class="headerlink" title="3.1 半导体的开关特性"></a>3.1 半导体的开关特性</h3><h3 id="3-2-门电路"><a href="#3-2-门电路" class="headerlink" title="3.2 门电路"></a>3.2 门电路</h3><p><strong>①简单逻辑门电路</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">二极管与</th>
<th align="center">二极管或</th>
<th align="center">三极管非</th>
</tr>
</thead>
<tbody><tr>
<td align="center">电路</td>
<td align="center"><img src="/images/%E6%95%B0%E7%94%B5/%E4%BA%8C%E6%9E%81%E7%AE%A1%E4%B8%8E%E9%97%A8.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E7%94%B5/%E4%BA%8C%E6%9E%81%E7%AE%A1%E6%88%96%E9%97%A8%E7%94%B5%E8%B7%AF.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E7%94%B5/%E4%B8%89%E6%9E%81%E7%AE%A1%E9%9D%9E%E7%94%B5%E8%B7%AF.png" title="图片"></td>
</tr>
<tr>
<td align="center">符号</td>
<td align="center"><img src="/images/%E6%95%B0%E7%94%B5/%E4%BA%8C%E6%9E%81%E7%AE%A1%E4%B8%8E%E9%97%A8%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E7%94%B5/%E4%BA%8C%E6%9E%81%E7%AE%A1%E6%88%96%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
<td align="center"><img src="/images/%E6%95%B0%E7%94%B5/%E4%B8%89%E6%9E%81%E7%AE%A1%E9%9D%9E%E7%AC%A6%E5%8F%B7.png" title="图片"></td>
</tr>
</tbody></table>
<p><strong>②TTL集成逻辑门电路</strong></p>
]]></content>
      <categories>
        <category>fpga</category>
      </categories>
      <tags>
        <tag>数电</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟电路</title>
    <url>/2021/05/29/fpga/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="1-半导体二极管、三极管和场效应管"><a href="#1-半导体二极管、三极管和场效应管" class="headerlink" title="1. 半导体二极管、三极管和场效应管"></a>1. 半导体二极管、三极管和场效应管</h2><h3 id="1-1-本征半导体"><a href="#1-1-本征半导体" class="headerlink" title="1.1 本征半导体"></a>1.1 本征半导体</h3><span id="more"></span>
<ul>
<li>纯净的、结构完成的单晶半导体为本征半导体</li>
<li>绝对零度时相当于绝缘体</li>
<li>空穴：价电子挣脱共价键成为自由电子，留下的空位(带正电荷)<h3 id="1-2-杂质半导体"><a href="#1-2-杂质半导体" class="headerlink" title="1.2 杂质半导体"></a>1.2 杂质半导体</h3></li>
<li>N型半导体：添加5价元素，自由电子数目高，导电能力提高</li>
<li>P型半导体：添加3价微量元素<h3 id="1-3-PN结的形成"><a href="#1-3-PN结的形成" class="headerlink" title="1.3 PN结的形成"></a>1.3 PN结的形成</h3></li>
<li>一侧为p区为多子空穴，少子电子，另一侧为多子电子和少子空穴</li>
<li>中间自建电厂阻止扩散，加强漂移(中间部分电子和空穴中和，一侧仍多为空穴，另一侧多为电子)</li>
<li>正向电压：正极接P</li>
<li>反向电压：正极接N</li>
</ul>
<h3 id="1-4-二极管分类"><a href="#1-4-二极管分类" class="headerlink" title="1.4 二极管分类"></a>1.4 二极管分类</h3><table>
<thead>
<tr>
<th align="left">点接触型</th>
<th align="center">面接触型</th>
<th align="center">平面型</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><img src="/images/%E6%A8%A1%E7%94%B5/%E7%82%B9%E6%8E%A5%E8%A7%A6%E5%9E%8B%E5%9B%BE.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/%E6%A8%A1%E7%94%B5/%E9%9D%A2%E6%8E%A5%E8%A7%A6%E5%9E%8B%E5%9B%BE.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/%E6%A8%A1%E7%94%B5/%E5%B9%B3%E9%9D%A2%E5%9E%8B%E5%9B%BE.png" alt="my-logo.png" title="my-logo"></td>
</tr>
</tbody></table>
<h3 id="1-4-三极管"><a href="#1-4-三极管" class="headerlink" title="1.4 三极管"></a>1.4 三极管</h3><ul>
<li>带箭头为发射结是p指向n</li>
<li>掺杂浓度：发射区(emitter)&gt;&gt;集电区(base)&gt;&gt;基区(collector)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">PNP型</th>
<th align="center">NPN型</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/%E6%A8%A1%E7%94%B5/NPN%E7%AC%A6%E5%8F%B7.png" alt="my-logo.png" title="my-logo"></td>
<td align="center"><img src="/images/%E6%A8%A1%E7%94%B5/PNP%E7%AC%A6%E5%8F%B7.png" alt="my-logo.png" title="my-logo"></td>
</tr>
</tbody></table>
<h3 id="1-5-晶体管的电流分配"><a href="#1-5-晶体管的电流分配" class="headerlink" title="1.5 晶体管的电流分配"></a>1.5 晶体管的电流分配</h3><ul>
<li>内部条件：晶体管结构</li>
<li>外部条件：发射结整</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2021/06/08/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-算法分析的方法"><a href="#1-算法分析的方法" class="headerlink" title="1.算法分析的方法"></a>1.算法分析的方法</h2><h3 id="1-1-概率分析"><a href="#1-1-概率分析" class="headerlink" title="1.1 概率分析"></a>1.1 概率分析</h3>]]></content>
  </entry>
  <entry>
    <title>背包问题</title>
    <url>/2021/05/23/%E7%AE%97%E6%B3%95/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021/07/02/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/docker/</url>
    <content><![CDATA[<h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1. 入门"></a>1. 入门</h2><h3 id="1-1-安装docker"><a href="#1-1-安装docker" class="headerlink" title="1.1 安装docker"></a>1.1 安装docker</h3><span id="more"></span>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、yum 包更新到最新</span> </span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span> </span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、 设置yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、 安装docker，出现输入的界面都按 y</span> </span><br><span class="line">yum install -y docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5、 查看docker版本，验证是否验证成功</span></span><br><span class="line">docker -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="1-2-配置docker镜像加速器"><a href="#1-2-配置docker镜像加速器" class="headerlink" title="1.2 配置docker镜像加速器"></a>1.2 配置docker镜像加速器</h3><ul>
<li>阿里云<ol>
<li>登录阿里云</li>
<li>进入右上角控制台</li>
<li>左上角产品与服务搜索镜像</li>
<li>进入容器镜像服务</li>
<li>点击镜像加速器</li>
<li>根据官网命令配置</li>
</ol>
</li>
</ul>
<h3 id="1-3-服务相关"><a href="#1-3-服务相关" class="headerlink" title="1.3 服务相关"></a>1.3 服务相关</h3><ul>
<li>启动：systemctl start docker</li>
<li>状态：systemctl status docker  </li>
<li>停止：systemctl stop docker</li>
<li>重启：systemctl restart docker  </li>
<li>开机启动：systemctl enable docker   </li>
</ul>
<h3 id="1-4-镜像相关"><a href="#1-4-镜像相关" class="headerlink" title="1.4 镜像相关"></a>1.4 镜像相关</h3><ul>
<li>查看所有镜像：docker images</li>
<li>搜索镜像：docker search 镜像名</li>
<li>下载镜像：docker pull 镜像名</li>
<li>指定版本下载：docker pull 镜像名:版本号</li>
<li>删除镜像：docker rmi id号 </li>
<li>删除所有镜像：docker rmi <code>docker images -q</code>  <blockquote>
<p>hub.docker.com 查看镜像是否被维护</p>
</blockquote>
</li>
</ul>
<h3 id="1-5-容器相关"><a href="#1-5-容器相关" class="headerlink" title="1.5 容器相关"></a>1.5 容器相关</h3><ul>
<li>查看容器<ul>
<li>docker ps #查看正在运行的容器</li>
<li>docker ps -a # 查看所有容器</li>
</ul>
</li>
<li>创建容器<ul>
<li>docker run -it –name=名字 镜像:版本 /bin/bash<ul>
<li>i：没有客户端连接仍运行</li>
<li>t：分配一个终端，退出则关闭容器</li>
<li>d：后台运行 </li>
<li>exit 退出</li>
</ul>
</li>
</ul>
</li>
<li>进入容器<ul>
<li>docker exec -it 名字 /bin/bash</li>
</ul>
</li>
<li>启动容器<ul>
<li>docker start 名字</li>
</ul>
</li>
<li>停止容器<ul>
<li>docker stop 名字</li>
</ul>
</li>
<li>删除容器<ul>
<li>docker rm 名字</li>
</ul>
</li>
<li>查看容器信息<ul>
<li>docker inspect 名字</li>
</ul>
</li>
</ul>
<h2 id="2-容器的数据卷"><a href="#2-容器的数据卷" class="headerlink" title="2.容器的数据卷"></a>2.容器的数据卷</h2><ul>
<li>配置数据卷<ul>
<li>-v 宿主主机目录:容器内文件目录</li>
<li>例：sudo docker run -it –name=c2 -v /home/dong/data:/root/data_container mysql:5.7 /bin/bash</li>
</ul>
</li>
<li>数据卷容器<ul>
<li>创建数据卷容器<ul>
<li>-v /volume</li>
<li>docker run -it –name=c3 -v /volume mysql:5.7 /bin/bash</li>
</ul>
</li>
<li>设置数据卷<ul>
<li>–volume-from c3</li>
<li>docker run -it –name=c1 –volumes-from c3 mysql:5.7 /bin/bash</li>
<li>docker run -it –name=c2 –volumes-from c3 mysql:5.7 /bin/bash</li>
<li>可使用inspect指令查看mounts属性里的source属性查看绑定的宿主主机目录</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-应用部署"><a href="#2-应用部署" class="headerlink" title="2.应用部署"></a>2.应用部署</h2><h3 id="2-1部署mysql"><a href="#2-1部署mysql" class="headerlink" title="2.1部署mysql"></a>2.1部署mysql</h3><ol>
<li>搜索mysql镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取mysql镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建容器，设置端口映射、目录映射</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建mysql目录用于存储mysql数据信息</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ul>
<li><strong>-p 3307:3306</strong>：将容器的 3306 端口映射到宿主机的 3307 端口。</li>
<li><strong>-v $PWD/conf:/etc/mysql/conf.d</strong>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li>
<li><strong>-v $PWD/logs:/logs</strong>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li>
<li><strong>-v $PWD/data:/var/lib/mysql</strong> ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li>
<li><strong>-e MYSQL_ROOT_PASSWORD=123456：</strong>初始化 root 用户的密码。</li>
</ul>
</li>
</ul>
<h3 id="2-2-tomcat"><a href="#2-2-tomcat" class="headerlink" title="2.2 tomcat"></a>2.2 tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在/root目录下创建tomcat目录用于存储tomcat数据信息</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br><span class="line"></span><br><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat </span><br></pre></td></tr></table></figure>

<h2 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3.Dockerfile"></a>3.Dockerfile</h2><table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>指定父镜像</td>
<td>指定dockerfile基于那个image构建</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>作者信息</td>
<td>用来标明这个dockerfile谁写的</td>
</tr>
<tr>
<td>LABEL</td>
<td>标签</td>
<td>用来标明dockerfile的标签 可以使用Label代替Maintainer 最终都是在docker image基本信息中可以查看</td>
</tr>
<tr>
<td>RUN</td>
<td>执行命令</td>
<td>执行一段命令 默认是/bin/sh 格式: RUN command 或者 RUN [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>CMD</td>
<td>容器启动命令</td>
<td>提供启动容器时候的默认命令 和ENTRYPOINT配合使用.格式 CMD command param1 param2 或者 CMD [“command” , “param1”,”param2”]</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>入口</td>
<td>一般在制作一些执行就关闭的容器中会使用</td>
</tr>
<tr>
<td>COPY</td>
<td>复制文件</td>
<td>build的时候复制文件到image中</td>
</tr>
<tr>
<td>ADD</td>
<td>添加文件</td>
<td>build的时候添加文件到image中 不仅仅局限于当前build上下文 可以来源于远程服务</td>
</tr>
<tr>
<td>ENV</td>
<td>环境变量</td>
<td>指定build时候的环境变量 可以在启动的容器的时候 通过-e覆盖 格式ENV name=value</td>
</tr>
<tr>
<td>ARG</td>
<td>构建参数</td>
<td>构建参数 只在构建的时候使用的参数 如果有ENV 那么ENV的相同名字的值始终覆盖arg的参数</td>
</tr>
<tr>
<td>VOLUME</td>
<td>定义外部可以挂载的数据卷</td>
<td>指定build的image那些目录可以启动的时候挂载到文件系统中 启动容器的时候使用 -v 绑定 格式 VOLUME [“目录”]</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>暴露端口</td>
<td>定义容器运行的时候监听的端口 启动容器的使用-p来绑定暴露端口 格式: EXPOSE 8080 或者 EXPOSE 8080/udp</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>工作目录</td>
<td>指定容器内部的工作目录 如果没有创建则自动创建 如果指定/ 使用的是绝对地址 如果不是/开头那么是在上一条workdir的路径的相对路径</td>
</tr>
<tr>
<td>USER</td>
<td>指定执行用户</td>
<td>指定build或者启动的时候 用户 在RUN CMD ENTRYPONT执行的时候的用户</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>健康检查</td>
<td>指定监测当前容器的健康监测的命令 基本上没用 因为很多时候 应用本身有健康监测机制</td>
</tr>
<tr>
<td>ONBUILD</td>
<td>触发器</td>
<td>当存在ONBUILD关键字的镜像作为基础镜像的时候 当执行FROM完成之后 会执行 ONBUILD的命令 但是不影响当前镜像 用处也不怎么大</td>
</tr>
<tr>
<td>STOPSIGNAL</td>
<td>发送信号量到宿主机</td>
<td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td>
</tr>
<tr>
<td>SHELL</td>
<td>指定执行脚本的shell</td>
<td>指定RUN CMD ENTRYPOINT 执行命令的时候 使用的shell</td>
</tr>
</tbody></table>
<h3 id="案例①：自定义centos7"><a href="#案例①：自定义centos7" class="headerlink" title="案例①：自定义centos7"></a>案例①：自定义centos7</h3><ul>
<li>要求：<ul>
<li>登录路径为 /usr</li>
<li>可以使用vim</li>
</ul>
</li>
<li>步骤<ol>
<li>定义父镜像:FROM centos:7</li>
<li>定义作者信息:MAINTAINER 随意内容</li>
<li>执行安装vim命令: RUN yum install -y vim</li>
<li>定义默认的工作目录: WORKDIR /usr</li>
</ol>
</li>
<li>实现<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER nut &lt;nut008.github.io&gt;</span><br><span class="line"></span><br><span class="line">RUN yum install -y vim</span><br><span class="line">WORKDIR /usr</span><br><span class="line">cmd /bin/bash</span><br></pre></td></tr></table></figure>
<ul>
<li>docker build -f 文件路径 -t 名称:版本 路径</li>
<li>docker build -f ./centos_dockerFile -t my_centos:1 .</li>
</ul>
</li>
</ul>
<p>docker镜像制作其他方式</p>
<ul>
<li>docker commit 容器id 镜像名称:版本号</li>
<li>docker save -o 压缩文件名称 镜像名称:版本号</li>
<li>docker load -i 压缩文件名称</li>
<li>不是目录挂载部分可生效</li>
</ul>
<h2 id="4-服务编排"><a href="#4-服务编排" class="headerlink" title="4.服务编排"></a>4.服务编排</h2><h3 id="4-1安装Docker-Compose"><a href="#4-1安装Docker-Compose" class="headerlink" title="4.1安装Docker Compose"></a>4.1安装Docker Compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Compose目前已经完全支持Linux、Mac OS和Windows，在我们安装Compose之前，需要先安装Docker。下面我 们以编译好的二进制包方式安装在Linux系统中。</span> </span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置文件可执行权限</span> </span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本信息</span> </span><br><span class="line">docker-compose -version</span><br></pre></td></tr></table></figure>

<h3 id="二、卸载Docker-Compose"><a href="#二、卸载Docker-Compose" class="headerlink" title="二、卸载Docker Compose"></a>二、卸载Docker Compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 二进制包方式安装的，删除二进制文件即可</span></span><br><span class="line">rm /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h2 id="5-私有仓库搭建"><a href="#5-私有仓库搭建" class="headerlink" title="5.私有仓库搭建"></a>5.私有仓库搭建</h2>]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2021/07/01/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/git/</url>
    <content><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><span id="more"></span>
<ul>
<li>地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
<li>右键点击Git Bash Here 输入git –version 命令，可以查看git版本</li>
<li>TortoiseGit(更强大的的图形化工具)</li>
</ul>
<h2 id="2-工作流程"><a href="#2-工作流程" class="headerlink" title="2. 工作流程"></a>2. 工作流程</h2><h3 id="2-1-git常用命令"><a href="#2-1-git常用命令" class="headerlink" title="2.1 git常用命令"></a>2.1 git常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git init</td>
<td>初始化，创建 git 仓库</td>
</tr>
<tr>
<td>git status</td>
<td>查看 git 状态 （文件是否进行了添加、提交操作）</td>
</tr>
<tr>
<td>git add 文件名</td>
<td>添加，将指定文件添加到暂存区</td>
</tr>
<tr>
<td>git commit -m ‘提交信息’</td>
<td>提交，将暂存区文件提交到历史仓库</td>
</tr>
<tr>
<td>git log</td>
<td>查看日志（ git 提交的历史日志）</td>
</tr>
</tbody></table>
<h3 id="2-2-版本管理"><a href="#2-2-版本管理" class="headerlink" title="2.2 版本管理"></a>2.2 版本管理</h3><ul>
<li><p>git reflog ：可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录的操作）</p>
</li>
<li><p>git reset –hard 版本唯一索引值</p>
<h3 id="2-3-分支管理"><a href="#2-3-分支管理" class="headerlink" title="2.3 分支管理"></a>2.3 分支管理</h3></li>
<li><p>创建和切换</p>
<p>创建命令：git branch 分支名<br>切换命令：git checkout 分支名<br>查看命令：git branch</p>
</li>
<li><p>新分支添加文件</p>
<p>查看文件命令：ls</p>
<p>总结：不同分支之间的关系是平行的关系，不会相互影响</p>
</li>
<li><p>合并分支</p>
<p>合并命令：git merge 分支名</p>
</li>
<li><p>删除分支</p>
<p>删除命令：git branch -d 分支名</p>
</li>
<li><p>查看分支列表</p>
<p>查看命令：git branch</p>
</li>
</ul>
<h3 id="2-4-设置远程仓库"><a href="#2-4-设置远程仓库" class="headerlink" title="2.4 设置远程仓库"></a>2.4 设置远程仓库</h3><ol>
<li>设置Git账户<ul>
<li>git config user.name（查看git账户）</li>
<li>git config user.email（查看git邮箱）</li>
<li>git config –global user.name “账户名”（设置全局账户名）</li>
<li>git config –global user.email “邮箱”（设置全局邮箱）</li>
<li>cd ~/.ssh（查看是否生成过SSH公钥）</li>
</ul>
</li>
<li>生成SSH公钥<ul>
<li>生成命令: ssh-keygen –t rsa –C “邮箱” ( 注意：这里需要敲3次回车)</li>
<li>查看命令: cat ~/.ssh/id-rsa.pub</li>
</ul>
</li>
<li>设置账户公钥<ul>
<li>右上角设置</li>
<li>安全设置</li>
<li>添加ssh公钥</li>
</ul>
</li>
<li>公钥测试<ul>
<li>命令: ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x65;&#x65;&#x2e;&#99;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x65;&#x65;&#x2e;&#99;&#111;&#x6d;</a></li>
</ul>
</li>
</ol>
<h3 id="2-5-推送和克隆"><a href="#2-5-推送和克隆" class="headerlink" title="2.5 推送和克隆"></a>2.5 推送和克隆</h3><ul>
<li>推送<ul>
<li>git remote add 远程名称 远程仓库URL</li>
<li>git push -u 仓库名称 分支名</li>
</ul>
</li>
<li>克隆<ul>
<li>git clone 仓库地址</li>
</ul>
</li>
<li>拉取<ul>
<li>git pull 远程仓库名 分支名</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>hexo</title>
    <url>/2019/12/10/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/hexo/</url>
    <content><![CDATA[<h2 id="1-初始化环境"><a href="#1-初始化环境" class="headerlink" title="1.初始化环境"></a>1.初始化环境</h2><p><strong>部署环境</strong><br> <span id="more"></span></p>
<blockquote>
</blockquote>
<ul>
<li>安装nmp<br>node: <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></li>
<li>安装 hexo<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo-cli</span><br><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-基础命令"><a href="#2-基础命令" class="headerlink" title="2. 基础命令"></a>2. 基础命令</h2><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hexo init 文件夹名称</span><br><span class="line">hexo new 文章名称</span><br><span class="line">hexo clear</span><br><span class="line">hexo g</span><br><span class="line">hexo server</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h2 id="3-站内搜索"><a href="#3-站内搜索" class="headerlink" title="3. 站内搜索"></a>3. 站内搜索</h2><h3 id="3-1-安装插件"><a href="#3-1-安装插件" class="headerlink" title="3.1 安装插件"></a>3.1 安装插件</h3><figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h3 id="3-2-编辑站点配置文件"><a href="#3-2-编辑站点配置文件" class="headerlink" title="3.2 编辑站点配置文件"></a>3.2 编辑站点配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search搜索功能</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-编辑主题配置文件"><a href="#3-3-编辑主题配置文件" class="headerlink" title="3.3 编辑主题配置文件"></a>3.3 编辑主题配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="3-4-自动生成阅读全文"><a href="#3-4-自动生成阅读全文" class="headerlink" title="3.4 自动生成阅读全文"></a>3.4 自动生成阅读全文</h3><ul>
<li>安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure></li>
<li>配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> []</span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Fourth unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1 --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 2 --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 3 --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% tabs Fourth unique name %&#125;</span><br><span class="line">&lt;!-- tab 代码 --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 电路 --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>md语法</title>
    <url>/2021/05/23/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/md/</url>
    <content><![CDATA[<h3 id="1-基本符号"><a href="#1-基本符号" class="headerlink" title="1. 基本符号"></a>1. 基本符号</h3><span id="more"></span>  
<blockquote>
<p>*-+.&gt;</p>
</blockquote>
<h3 id="2-标题"><a href="#2-标题" class="headerlink" title="2. 标题"></a>2. 标题</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure>

<h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h3><h4 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h4><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">//形式一</span><br><span class="line"><span class="bullet">+</span> a</span><br><span class="line"><span class="bullet">+</span> b</span><br><span class="line"><span class="bullet">+</span> c</span><br><span class="line">//形式二</span><br><span class="line"><span class="bullet">-</span> d</span><br><span class="line"><span class="bullet">-</span> e</span><br><span class="line"><span class="bullet">-</span> f</span><br><span class="line">//形式三</span><br><span class="line"><span class="bullet">*</span> g</span><br><span class="line"><span class="bullet">*</span> h</span><br><span class="line"><span class="bullet">*</span> i</span><br></pre></td></tr></table></figure>
<h4 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h4><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> abc</span><br><span class="line"><span class="bullet">2.</span> bcd</span><br><span class="line"><span class="bullet">3.</span> cde</span><br></pre></td></tr></table></figure>
<h3 id="4-引用块"><a href="#4-引用块" class="headerlink" title="4. 引用块"></a>4. 引用块</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h3 id="5-代码块"><a href="#5-代码块" class="headerlink" title="5. 代码块"></a>5. 代码块</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">\<span class="code">`\`</span></span><br></pre></td></tr></table></figure>
<h3 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">[<span class="string">简书</span>](<span class="link">https://www.jianshu.com &quot;创作你的创作&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="7-图片"><a href="#7-图片" class="headerlink" title="7. 图片"></a>7. 图片</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">![<span class="string">my-logo.png</span>](<span class="link">路径 &quot;my-logo&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h3><h4 id="8-1-强调字体"><a href="#8-1-强调字体" class="headerlink" title="8.1 强调字体"></a>8.1 强调字体</h4><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*md*</span>    </span><br><span class="line"><span class="strong">**md**</span></span><br><span class="line"><span class="emphasis">_md_</span>   </span><br><span class="line"> <span class="strong">__md__</span></span><br></pre></td></tr></table></figure>

<h4 id="8-2-删除线"><a href="#8-2-删除线" class="headerlink" title="8.2 删除线"></a>8.2 删除线</h4><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">~删除~</span><br></pre></td></tr></table></figure>
<h3 id="9-表格"><a href="#9-表格" class="headerlink" title="9. 表格"></a>9. 表格</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">//例子一</span><br><span class="line">|123|234|345|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子二</span><br><span class="line">|123|234|345|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子三</span><br><span class="line">123|234|345</span><br><span class="line">:-|:-:|-:</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>python</title>
    <url>/2021/06/15/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/python/</url>
    <content><![CDATA[<h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h2> <span id="more"></span>
<h3 id="1-1-字符串"><a href="#1-1-字符串" class="headerlink" title="1.1 字符串"></a>1.1 字符串</h3><ul>
<li>定义：’ 或 “ 或 ‘’’</li>
<li>获取<ul>
<li>下标</li>
<li>切片:[start:end:step] (不包含end所对应的字符)</li>
<li>长度:len(a)</li>
</ul>
</li>
<li>删除：用del()函数</li>
<li>%格式控制:<ul>
<li>“test%-5d%d”%(age,num) </li>
<li>“名字:%(name)s,年龄%(age)d”%{“name”:”铁钢”,”age”:15}  </li>
<li>输出%时要替换为%%</li>
</ul>
</li>
<li>format<ul>
<li>“名字:{0},年龄{1}”.format(“铁钢”,12)</li>
<li>“名字:{n0},年龄{n1}”.format(n0=”铁钢”,n1=12)</li>
</ul>
</li>
<li>f<ul>
<li>f”名字{name},年龄{age}”</li>
<li>f”年龄:{78 - 65 =}”</li>
<li>f”年龄:{18:#b}” #转换为二进制显示python3.8版本</li>
</ul>
</li>
<li>其他功能<ul>
<li>.startswith(“开头”)</li>
<li>.endswith(“结尾”)</li>
<li>.isdecimal()   </li>
<li>.strip()<h3 id="1-2-数字和运算符"><a href="#1-2-数字和运算符" class="headerlink" title="1.2 数字和运算符"></a>1.2 数字和运算符</h3></li>
</ul>
</li>
<li>运算符:+,-,*,/,%,**,//</li>
<li>整数</li>
<li>浮点</li>
<li>负数:(1-2j)</li>
<li>布尔</li>
<li>二进制：0b111</li>
<li>数据类型转换<ul>
<li>转整形:int(a)</li>
<li>转浮点:float(a)</li>
<li>转复数:complex(x,y)</li>
<li>转字符串:str(a)</li>
<li>转二进制:bin(a)</li>
<li>转八进制:oct(a)</li>
<li>转十六进制:hex(a)</li>
<li>十进制数转ASCII码:chr(97)</li>
<li>ASCII转十进制数:ord(‘a’)<h3 id="1-3-列表"><a href="#1-3-列表" class="headerlink" title="1.3 列表"></a>1.3 列表</h3></li>
</ul>
</li>
<li>[]:可变序列、可存储不同类型的成员</li>
<li>help([])查看所有方法</li>
<li>可使用in(判断是否包含元素)，del()(方法删除元素)，切片，+进行列表合并(+会改变被赋值的id，extend不会)</li>
</ul>
<h3 id="1-4-元组"><a href="#1-4-元组" class="headerlink" title="1.4 元组"></a>1.4 元组</h3><ul>
<li>():不可变序列、可存储不同类型成员</li>
</ul>
<h3 id="1-5-字典"><a href="#1-5-字典" class="headerlink" title="1.5 字典"></a>1.5 字典</h3><ul>
<li>{key:value}</li>
</ul>
<h2 id="2-分支和循环"><a href="#2-分支和循环" class="headerlink" title="2.分支和循环"></a>2.分支和循环</h2><h3 id="2-1-if"><a href="#2-1-if" class="headerlink" title="2.1 if"></a>2.1 if</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">2</span>&gt;<span class="number">1</span>:</span><br><span class="line">   代码块</span><br><span class="line"><span class="keyword">elif</span> <span class="number">3</span>&gt;<span class="number">5</span>:</span><br><span class="line">   代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   代码块</span><br></pre></td></tr></table></figure>

<h3 id="2-2-while和for"><a href="#2-2-while和for" class="headerlink" title="2.2 while和for"></a>2.2 while和for</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">   代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="comment">#当遇到break则else不执行</span></span><br><span class="line"><span class="keyword">for</span> variable <span class="keyword">in</span> sequence:</span><br><span class="line">   代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="comment">#当遇到break则else不执行</span></span><br><span class="line"><span class="comment">#可通过in(是否在某个集合：i in list)和is(是否同一个引用)进行简洁判断</span></span><br></pre></td></tr></table></figure>

<h2 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 文件名 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="comment"># sys.path[0]=&#x27;路径&#x27; 就会到此目录扫描模块=</span></span><br><span class="line"><span class="keyword">del</span> functionName(para):</span><br><span class="line">   <span class="string">&#x27;&#x27;&#x27; 说明文档&#x27;&#x27;&#x27;</span></span><br><span class="line">   <span class="comment"># 函数体</span></span><br><span class="line">   <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> a <span class="comment">#全局变量</span></span><br><span class="line"><span class="keyword">nonlocal</span> b <span class="comment"># 闭包变量</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-匿名函数"><a href="#3-1-匿名函数" class="headerlink" title="3.1 匿名函数"></a>3.1 匿名函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x,y:x*y</span><br><span class="line">a = <span class="keyword">lambda</span> x,y:x*y</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-类"><a href="#4-类" class="headerlink" title="4. 类"></a>4. 类</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">   __init__(self):</span><br><span class="line">      self.name = <span class="string">&#x27;kong&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>乒乓球</title>
    <url>/2021/05/28/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%B9%92%E4%B9%93%E7%90%83/</url>
    <content><![CDATA[<!-- ## 步法
步法|以右侧为例
:-|:-:
单步|右侧迈出一小步
跨步|右腿跨出一大步，左腿跟进
并步|重心前脚掌，左腿向右腿并拢，右腿迈出一大步
侧身步|　
交叉步|　
小碎步|　

## 打法
名称|拍型|方向|击球时间|击球部位|步法
:-|:-:|:-:|:-:|:-:|:-:
正手平击发球|稍前倾|右后->左前上|下降的后期|中上部|左前右后
反手平击发球|稍前倾|左后下->左前上|下降的后期|中上部|左前右后
正手攻球|稍前倾|右后->左前上|上升的前期|中上部|左前右后
反手推挡|稍前倾|左后->右前上|上升的前期|中上部|
正手转球|稍后仰|后上->左前下|下架后期|中下部
快搓|稍后仰||上升期|中下部|右腿单步
慢搓|稍后仰||下架期|中下部|右腿单步
正手弧圈球| -->]]></content>
  </entry>
</search>
